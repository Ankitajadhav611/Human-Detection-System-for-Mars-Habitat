/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 01.04.2024 23:19:33

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242640;
#else
constexpr int kTensorArenaSize = 241616;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[2] = { 10424, -20834, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00054058065870776772, 0.00022474507568404078, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 28,-21,-18,48,-44,-10,-31,2,126,-27,-10,-17,-9,-6,-39,11,70,-44,-24,-43,127,41,30,-28,-17,-39,46,34,-9,-15,-12,30, 
  /* [1][0][][] */ 58,61,65,-72,-83,60,-4,30,-71,-4,39,49,100,40,44,9,-51,12,-68,-106,-110,31,29,88,49,79,-74,2,123,-127,-124,-16, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0069427806884050369, 0.0028864438645541668, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -575, -507, -672, -651, -835, -455, -725, 146, 716, -899, -256, -179, -471, -506, -241, -975, 589, -464, -656, -639, 722, -661, -403, -499, -196, -839, 663, -817, 214, -7, -689, -582, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.8746827815193683e-05, 4.9223664973396808e-05, 5.2013299864483997e-05, 4.5105636672815308e-05, 4.6280743845272809e-05, 5.6952107115648687e-05, 4.4923435780219734e-05, 5.6364158808719367e-05, 7.7346754551399499e-05, 4.822744449484162e-05, 8.9085522631648928e-05, 5.1546663598855957e-05, 4.8078363761305809e-05, 5.3094026952749118e-05, 5.0610968173714355e-05, 4.8778980271890759e-05, 6.0168615164002404e-05, 4.6164142986526713e-05, 4.5254713768372312e-05, 4.5447908632922918e-05, 6.2780185544397682e-05, 4.8305824748240411e-05, 4.8918704123934731e-05, 4.9569393013371155e-05, 8.1395221059210598e-05, 4.6268436562968418e-05, 5.0214759539812803e-05, 4.4590095058083534e-05, 5.1628110668389127e-05, 4.4081756641389802e-05, 4.5018365199211985e-05, 4.5067296014167368e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -47,-59,79,-7,55,-41,-92,-106,41,-102,-111,-12,15,-9,-44,29,-65,-41,-82,-57,-79,-106,-13,81,-115,3,55,-59,81,-30,-32,-90,55,-70,-95,39,-115,-81,-103,9,54,-91,-94,70,38,-110,83,-32,-4,-62,-49,66,-87,-59,-91,89,1,39,85,-117,-82,60,-71,27,-40,-1,47,68,34,80,52,-120,68,-91,15,58,-120,-6,-68,18,34,-2,65,-21,-66,-54,-92,74,9,89,-25,-127,-6,51,10,16, 
  /* [1][0][][] */ -54,9,-84,-15,-28,79,28,-30,51,-103,-100,93,114,-34,20,44,83,-36,0,127,-37,-16,11,12,16,34,-34,71,10,21,78,-39,41,76,-7,19,14,51,-37,-70,-52,-2,-12,-114,-24,32,-30,-50,-36,-55,111,60,-20,65,-53,-23,-4,72,89,43,-34,76,-65,-70,-72,25,57,16,92,47,-11,17,-116,95,-60,6,72,-65,-43,49,-60,73,-33,-89,19,86,-73,-60,75,66,87,89,80,82,34,-1, 
  /* [2][0][][] */ 34,17,-71,59,-12,-38,62,43,-107,58,-46,80,127,-31,63,-111,-57,-26,11,63,-74,-25,70,3,-47,74,82,-7,-54,70,53,88,-67,-28,-68,-63,-101,69,65,-40,-100,-76,8,-38,-68,88,-32,-66,64,64,104,-73,-48,61,25,28,-66,75,-21,-24,-3,38,-37,67,66,21,29,53,-56,71,-15,-57,11,-49,19,-12,-37,-45,-7,-4,38,-81,-7,-37,-7,-94,-28,-37,75,83,-5,4,-31,-58,-35,-41, 
  /* [3][0][][] */ 59,-13,23,-41,-23,44,-121,23,30,7,49,-16,76,79,57,-11,87,81,-58,0,96,-97,-75,-123,-31,-121,-91,88,29,-107,69,-5,-65,-46,-28,-27,-101,-36,23,33,-37,-103,-107,-13,57,14,-58,-94,52,-90,27,-14,90,15,73,-108,-122,-124,-69,-70,-106,22,-47,60,45,-46,-72,-43,-42,-80,-10,82,8,-114,42,-61,17,81,78,-14,-100,-127,23,75,14,31,-58,-126,-93,30,-10,-89,76,-103,-100,25, 
  /* [4][0][][] */ 26,77,-18,30,-38,-38,11,-2,38,65,-26,33,55,-51,-29,-78,-40,-23,-70,-5,81,-102,62,6,-33,-21,41,-68,-59,21,-80,-67,47,87,-6,-112,-62,-25,-117,28,-65,-77,-85,-102,13,79,13,35,3,-53,-33,-89,-90,21,-97,0,19,-105,11,-3,-12,-85,-53,-79,-56,33,-16,-50,9,-110,-106,-97,-69,0,78,34,42,-38,-25,-70,-12,-58,-103,-39,-18,46,66,-17,-127,-87,28,32,10,75,-105,-34, 
  /* [5][0][][] */ 61,-77,44,43,50,-71,14,14,51,-98,-14,-57,40,57,24,13,40,42,-76,85,23,29,-3,-30,-89,-41,-14,-73,31,6,-1,-55,-31,-15,-56,18,-109,-31,14,0,-69,-49,25,50,-22,12,18,-40,-89,81,21,26,18,13,38,-4,74,29,-1,-54,22,-62,18,-40,-34,62,-28,2,45,6,62,-49,-48,64,-19,-81,-1,-55,0,51,84,22,17,80,-67,48,-18,17,48,-80,93,127,-23,26,37,-67, 
  /* [6][0][][] */ 5,-55,94,64,-96,-78,-16,55,-24,-98,-7,-101,66,42,94,-122,26,-13,6,77,-86,-127,93,42,-74,-96,-23,-64,-41,-127,31,-89,-97,-127,-60,-114,-20,21,-113,68,66,40,8,-28,-125,87,-101,-58,-91,0,-40,-81,57,-64,71,-44,-4,-12,-76,102,-107,-16,49,-81,-64,48,84,-50,57,-21,-99,-18,46,-85,-100,-47,-90,-107,-67,-37,17,-39,29,-38,-83,-96,-44,-105,67,75,86,-3,-64,-80,59,-43, 
  /* [7][0][][] */ 79,23,-64,-7,-43,94,7,-40,89,-37,-62,-3,62,-52,58,46,39,41,-32,120,57,35,-9,64,-67,111,59,32,-32,89,-10,55,15,42,91,90,-127,62,-28,-30,89,-48,92,5,50,-8,80,-76,27,-15,-81,-35,-26,101,26,66,62,-79,77,-73,16,-13,39,-62,-82,-31,63,4,-52,79,29,102,46,48,33,0,-6,21,-62,5,93,-25,0,-30,69,8,-90,77,86,4,102,101,-11,-13,16,-23, 
  /* [8][0][][] */ 25,35,2,-53,39,7,-33,42,-2,51,35,26,-127,-8,-42,-11,-11,57,47,-37,21,3,72,83,-49,26,35,71,-52,-79,-45,50,54,-9,4,-11,105,9,52,50,51,60,-61,-28,-5,-3,-7,70,24,-102,-104,5,21,-8,-22,-86,54,61,-95,94,60,31,46,65,-12,-20,6,61,-78,14,41,-16,70,11,22,50,-23,95,55,51,21,60,-69,-54,26,41,52,-19,15,-10,-50,52,-58,-34,-49,20, 
  /* [9][0][][] */ -13,-13,82,22,59,-115,-64,-123,18,26,-29,33,-1,-89,-111,-42,-13,-20,-96,-81,-14,69,-117,-114,81,-28,-31,5,-27,-66,-99,72,37,-19,4,-36,-89,-6,-46,-58,22,-79,28,-105,51,-3,-114,28,27,-23,-84,-62,52,-86,-83,72,101,-72,-24,-23,-93,75,59,-83,-75,-16,73,26,-54,71,91,-96,-6,52,-111,-105,-82,-127,-55,73,10,4,77,6,-59,-103,14,-35,71,10,-45,80,83,-19,40,-51, 
  /* [10][0][][] */ -28,27,21,-27,-2,51,54,-8,18,-12,7,-3,127,38,-12,-4,-21,37,-71,20,-6,8,18,-41,0,47,-53,-57,4,109,-42,-21,37,44,73,48,-45,-3,-34,4,-20,51,-45,-42,-46,-33,-8,-25,-9,62,71,12,31,16,-13,14,-60,-13,33,-38,5,48,42,28,42,-34,-52,-25,56,21,-60,-25,29,66,-50,27,14,13,32,3,50,-1,47,56,-50,17,40,-13,34,-3,18,10,-2,-17,5,-26, 
  /* [11][0][][] */ 93,4,-17,61,111,70,45,0,73,60,-66,85,57,-104,28,-54,-40,-83,55,61,10,57,7,-92,-91,-66,-12,63,78,-5,10,-1,-70,-67,44,80,-59,61,-34,-58,-9,77,-45,-17,-15,-55,-68,-65,54,127,107,51,-38,-92,41,33,-72,-77,1,-88,-59,67,73,-14,-2,75,-50,7,104,52,-103,-75,0,103,-64,14,-20,14,-40,58,-67,-20,-107,-7,39,-71,-7,-17,-80,-6,39,-58,-91,-15,-18,-55, 
  /* [12][0][][] */ -1,47,-69,-8,78,22,-36,1,-82,35,-22,1,23,-3,43,-82,-95,-23,-62,-50,25,-17,-4,75,-68,-30,89,-97,78,28,-36,127,-82,-59,-30,20,-33,-69,-36,23,105,27,-94,-64,-11,-76,-38,102,-53,-76,-35,92,13,21,-62,94,-31,-63,51,34,55,78,-20,59,84,20,-47,79,62,108,15,70,58,115,-23,-38,-26,9,-109,-91,-40,80,46,22,-34,12,33,91,-77,-97,65,82,87,-8,31,72, 
  /* [13][0][][] */ 82,-63,59,69,79,103,62,22,38,-97,-2,-19,127,45,56,-57,-103,-55,-80,58,51,-32,77,-49,-70,47,9,2,-58,-30,62,50,27,77,-2,30,-105,-29,-6,36,-52,52,-37,-24,-35,14,-9,-27,13,122,0,-76,-87,28,95,-42,-50,13,21,-88,-20,90,-78,27,-70,-57,-84,45,6,22,58,4,-91,54,-71,-71,-64,29,59,-67,53,-89,88,22,-73,-96,54,86,-1,-52,-50,83,104,-30,72,14, 
  /* [14][0][][] */ -61,-118,71,58,52,-28,-16,-111,-72,-30,54,59,-36,-99,-75,-96,-55,-56,-15,34,-65,23,-16,49,-98,-46,-33,11,-110,-112,-73,33,70,-21,-20,-28,66,110,8,-110,2,-106,31,62,67,-104,60,-75,82,25,72,45,57,-18,-4,25,-68,-21,20,55,-33,-70,-37,45,-113,-17,59,-111,-68,-77,-107,49,-32,84,25,-79,33,-106,40,20,35,-38,-127,-50,-101,-92,-119,78,75,7,57,-51,54,99,-26,66, 
  /* [15][0][][] */ -6,-43,-44,42,68,-92,33,-103,30,-23,-83,-15,78,-19,-100,-120,59,-12,-84,1,22,-4,43,75,51,39,14,65,0,28,37,-109,-14,-15,-77,-23,-77,78,80,-79,-7,77,-64,-41,1,-90,-59,-90,-26,-91,-23,6,-96,-110,-64,-27,46,27,-59,77,-60,-79,-18,72,-44,65,-83,-15,-71,-17,41,-86,0,-33,37,-112,-21,29,72,47,-92,32,-111,-76,-127,-51,-101,12,55,42,-112,-47,27,79,-111,78, 
  /* [16][0][][] */ -41,15,98,-41,34,75,-31,63,26,46,-67,32,-115,-27,-33,-16,94,56,97,8,71,71,-2,52,-11,27,-44,67,-84,-58,33,-20,-68,50,32,26,15,38,-14,-40,18,-30,43,97,41,78,68,-7,-27,-127,-62,80,4,56,38,10,40,74,-5,41,62,80,31,44,46,12,-10,79,2,47,3,-28,48,41,56,99,-20,106,-70,8,2,-60,19,4,15,90,82,-3,38,16,-41,2,26,-36,-93,-14, 
  /* [17][0][][] */ 31,-108,14,57,-70,-119,-73,-125,19,-101,67,40,77,51,-121,37,28,43,84,102,-94,-22,7,-61,-8,47,-79,12,95,-36,-38,49,-19,-37,19,-4,-52,82,-114,-36,-99,-43,-34,-20,-9,-5,73,-108,84,104,-32,2,-27,50,80,-79,-127,78,-100,-108,21,-99,61,87,-115,-87,32,-109,-103,-26,100,30,8,-120,-75,49,94,-51,28,-71,-2,-27,-81,-109,-116,65,69,-55,12,54,-101,-101,-21,77,-9,-7, 
  /* [18][0][][] */ -104,80,87,-55,-5,-83,-112,-10,-20,55,-116,-59,-49,18,43,-42,6,-37,67,-37,81,-58,6,-89,30,-106,-31,90,14,34,-14,26,29,-41,-87,-115,-45,17,-47,46,-53,-15,-62,-23,-122,0,9,-18,2,-11,52,14,-81,-19,-12,67,-55,52,-15,-83,65,89,-3,20,-63,-127,-44,89,66,-88,-42,88,-107,-51,-98,-112,57,38,-16,-85,-68,-22,-40,-77,81,-46,52,49,-117,-86,-39,101,68,-40,31,-34, 
  /* [19][0][][] */ 8,16,63,27,83,-46,79,73,76,-74,16,-26,-109,19,-63,45,56,-107,97,70,-33,65,-63,0,104,-90,16,-72,-103,-127,-75,57,76,-85,22,15,-5,-77,-39,-104,29,-121,-91,-3,-95,13,58,-101,-33,16,-51,26,-43,7,5,-22,15,82,29,-35,39,-12,86,48,-30,-15,-34,-12,23,37,63,-61,-68,-121,-62,-86,-34,-114,3,92,40,-117,-40,57,-94,-18,-5,-17,70,15,-14,66,-43,95,51,-56, 
  /* [20][0][][] */ 2,65,87,48,-49,62,22,80,-4,22,-50,-4,-108,66,32,-7,1,-35,9,-64,17,-8,-19,-20,77,-60,-66,67,11,-45,-21,56,73,21,-41,23,73,-17,12,-43,-59,-27,-68,-35,-25,-31,-58,83,53,-114,-127,30,79,55,39,-25,85,55,-12,115,56,-9,-29,-7,-5,-41,-12,60,-99,-68,-20,13,-26,-83,38,63,82,93,82,89,59,4,49,-27,58,97,10,60,5,74,28,-6,-13,37,-29,-15, 
  /* [21][0][][] */ 73,59,41,-110,73,-94,47,-8,-17,-73,-80,20,9,23,-63,-95,-110,-37,-8,-19,88,-61,47,-94,40,-85,-44,42,-6,-11,-18,-33,-7,7,-104,-106,79,76,-127,-46,-17,-4,15,-28,-97,-83,-80,67,-31,-83,-3,65,5,50,-98,20,-66,42,-49,89,49,-86,2,-25,59,12,-50,-81,-110,-12,36,66,19,-24,44,40,-118,-44,38,85,-3,82,25,-77,7,-99,46,-89,-104,55,66,-121,-44,-88,48,-32, 
  /* [22][0][][] */ 9,-55,-72,-107,76,-41,87,29,-96,64,-77,-105,86,-111,-109,-86,28,69,-127,-47,64,-74,18,17,82,-9,-109,74,-56,-91,-70,-110,43,42,10,4,-6,-22,-84,-109,-6,-19,-7,71,43,-116,73,-26,-59,-71,-21,-27,-83,-97,-43,26,-26,-36,-18,-35,68,-67,-71,-112,-65,7,-109,-50,105,85,-35,-8,-74,9,57,-93,29,-56,47,72,87,-102,-93,-120,61,65,77,-40,-62,16,-58,21,6,25,-53,81, 
  /* [23][0][][] */ 55,-87,-14,41,67,-82,-4,-110,30,-82,61,62,70,-108,15,-50,66,-33,-117,105,81,-80,69,-41,-29,2,67,6,57,59,52,0,-34,27,20,45,55,-14,-104,-13,-92,-14,10,-127,-53,-83,79,21,54,-64,-35,-44,57,-33,-30,95,-90,-27,84,12,-77,-89,-79,-14,5,20,-108,-121,57,7,77,-58,-27,-13,-36,-112,36,-42,72,89,-38,-50,31,-80,74,-10,83,-22,-71,26,82,73,96,-46,-27,68, 
  /* [24][0][][] */ -32,-78,-127,-27,-53,-25,-30,-61,28,38,44,34,109,37,-16,-69,-37,9,12,-9,60,-44,-40,-21,-18,13,47,36,77,54,13,-9,-28,2,29,14,-102,-50,39,-16,-36,-54,62,-52,3,-11,13,51,-85,4,9,18,51,24,54,-16,6,41,46,-27,56,-22,4,33,-65,55,-22,-66,-48,49,-32,0,-37,25,73,3,43,-63,-47,-85,-12,-44,-2,-33,7,11,-8,-40,39,-46,21,-7,10,32,-23,13, 
  /* [25][0][][] */ -88,-75,-95,-28,64,-87,-117,26,26,-127,-58,1,62,-24,-125,-43,-90,37,12,-103,49,56,-34,-75,-8,-58,-117,15,49,-89,15,94,73,-119,21,47,68,-75,-43,-36,-98,67,-118,-20,71,17,45,10,-117,69,-71,-16,18,-28,-78,8,-40,34,-110,47,93,17,35,35,-15,48,-38,-17,-95,-19,-42,-124,10,-119,45,-1,49,45,-7,9,26,26,-56,61,-92,-66,-118,-100,-36,-54,78,15,-126,-19,-21,-78, 
  /* [26][0][][] */ 63,-82,15,5,-70,-8,1,44,-94,-82,103,86,-124,-44,17,18,120,14,-41,-99,11,78,111,36,66,47,12,65,5,-29,-69,2,-19,-59,-89,-103,-12,79,6,104,-82,91,36,71,-63,78,-43,99,1,-8,-47,99,52,-57,9,-111,104,56,-32,58,-15,-65,71,-25,127,-8,-31,61,-99,37,96,61,91,-104,-56,47,32,-57,-72,26,-25,57,63,-59,82,18,-28,20,-76,106,-8,9,-69,96,8,20, 
  /* [27][0][][] */ -7,-8,-76,-120,-127,-62,-85,-31,20,82,18,-121,-40,37,62,-49,46,-33,66,-93,-105,-8,-45,-38,-119,25,-121,-19,45,16,-48,-23,43,49,-105,-99,-102,-79,-121,66,-108,-2,9,1,77,7,48,81,69,46,43,-86,-99,-100,-20,-49,84,-44,-126,-95,-70,-77,-48,35,26,-62,-125,82,28,-9,-126,-12,44,-67,-22,-100,32,-80,67,78,64,-42,97,-70,-88,-95,-52,12,-62,-19,-52,-41,37,-1,69,36, 
  /* [28][0][][] */ 45,-34,83,40,-125,-35,-75,-85,-40,-88,50,12,-98,-111,9,65,83,90,-62,67,-53,23,-90,-54,-103,74,-65,-44,-79,-95,-11,-8,-101,14,76,31,18,-83,-71,18,89,25,-91,37,-81,-25,9,43,2,-96,-68,-19,-99,4,55,37,17,-43,65,15,-18,-32,-127,-29,20,54,-13,62,-68,-1,-121,-59,40,38,7,-82,-105,-50,-70,11,-59,-93,41,-38,53,-110,32,-94,-108,-57,-45,-79,-59,56,-114,-58, 
  /* [29][0][][] */ 40,53,59,-44,-92,11,-113,33,100,-13,-85,-88,99,-99,-51,-30,-88,91,54,-81,-77,-30,63,9,-33,-4,-47,-11,-93,-19,100,-16,53,-4,-85,-54,7,90,26,95,40,100,-50,91,-11,101,-62,-23,18,-7,43,-96,106,-112,98,29,-68,56,-53,126,-127,94,-95,-58,-47,-60,56,92,81,-94,53,-81,123,57,66,42,113,-47,-26,29,-8,-82,-14,-70,61,113,48,77,-38,93,86,62,-109,8,-5,39, 
  /* [30][0][][] */ 13,-42,-75,18,-92,9,-75,-24,90,-34,-15,-60,-96,3,42,-4,-19,20,88,-111,24,-110,-123,-2,-121,8,-82,93,-26,-103,-108,-9,-94,-80,-127,-42,-3,-29,4,11,71,-89,-27,78,85,-60,84,44,-81,57,16,-113,90,-63,-23,84,-77,-53,-92,-43,-89,-19,-83,-41,-96,-98,-105,73,-71,89,45,-52,-85,87,25,-100,-56,-84,-87,-77,13,33,-114,-40,-117,15,-124,87,-50,-124,62,52,-46,-16,16,-82, 
  /* [31][0][][] */ 66,-97,25,84,43,53,-68,-103,-41,-6,-87,-68,100,-127,-56,95,-66,-97,58,35,51,24,-37,91,31,-121,24,37,-72,-56,34,92,7,8,-99,-16,86,-41,-37,-118,46,-77,-41,23,-7,-64,-50,13,57,60,95,-39,-67,-67,-89,11,-66,54,19,102,-15,-6,73,-82,110,95,-53,-86,58,-126,-90,-2,-102,-52,15,-2,-68,-52,37,75,-84,-43,104,58,43,83,-102,5,8,-62,-91,-40,1,88,12,-36, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0020717401057481766, 0.0020920056849718094, 0.0022105651441961527, 0.0019169895676895976, 0.0019669316243380308, 0.0024204645305871964, 0.0019092459697276354, 0.0023954766802489758, 0.0032872369047254324, 0.0020496663637459278, 0.0037861347664147615, 0.0021907330956310034, 0.0020433303434401751, 0.0022564961109310389, 0.0021509660873562098, 0.0020731065887957811, 0.0025571661535650492, 0.0019619760569185019, 0.0019233252387493849, 0.0019315361278131604, 0.0026681576855480671, 0.0020529974717646837, 0.0020790449343621731, 0.0021066991612315178, 0.0034592968877404928, 0.0019664084538817406, 0.0021341273095458746, 0.0018950790399685502, 0.0021941945888102055, 0.0018734745681285858, 0.0019132804591208696, 0.0019153599860146642, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { -2525, 7600, 14095, 2561, -3704, -5362, 24748, 2518, 3334, -1896, 15427, -754, -9893, 2838, 20097, 11738, 24095, 5629, -5717, -8403, 4831, 36898, 25923, 29966, 1723, 1304, 5705, 5130, 2562, -7861, 7844, -3640, -476, 4917, -143, 711, 16578, 5422, -2387, 6193, 12838, 11785, 7736, 18877, 9031, 6670, 1940, 14506, 5806, -6059, -5800, 424, -392, -1551, 2394, -134, 793, -906, -10673, 11719, -2527, 1357, -1162, -2351, -6514, 9473, 24411, 1838, -4821, 837, 1733, 2946, 3148, -1820, 770, 15116, -621, 28807, 21232, -1059, 10552, 2003, -1489, 2370, 26043, 9579, 6327, 1372, 6308, 6312, -544, -13497, 768, -3687, -6461, -2824, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.0002606303314678371, 0.00020686296920757741, 0.00017739601025823504, 0.00033294086460955441, 0.00029442249797284603, 0.00028184338589198887, 0.00013286122702993453, 0.00029668735805898905, 0.00015414117660839111, 0.00034331338247284293, 0.00012478014104999602, 0.00017454929184168577, 0.00023956445511430502, 0.0010060976492241025, 0.00015125724894460291, 0.00010664610454114154, 7.5514843047130853e-05, 0.00025590139557607472, 0.00033656592131592333, 0.00019719896954484284, 0.00011244960478506982, 7.4371528171468526e-05, 0.00011703745985869318, 5.4317169997375458e-05, 0.00013227458111941814, 0.00027315711486153305, 0.00050643010763451457, 0.00021764187840744853, 0.00018198280304204673, 0.00024639637558721006, 0.00017919656238518655, 0.00022838938457425684, 0.00014721757906954736, 0.00021421414567157626, 0.00021056813420727849, 0.00027214238070882857, 0.00012582335330080241, 0.00018782007100526243, 0.00026619521668180823, 0.00027942148153670132, 0.00010012451093643904, 0.00021705697872675955, 0.00019227681332267821, 0.00012839598639402539, 0.00021487288177013397, 0.00014962477143853903, 0.00021999437012709677, 0.00014895804633852094, 0.00022683996940031648, 0.00022584687394555658, 0.00026664859615266323, 0.00018735064077191055, 0.00026440032524988055, 0.00024761041277088225, 0.00032467252458445728, 0.00022118382912594825, 0.00026710028760135174, 0.00030290684662759304, 0.00016038639296311885, 0.00016736036923248321, 0.00031401208252646029, 0.00043880677549168468, 0.00025384518085047603, 0.0003692757454700768, 0.00029671480297110975, 0.00019767227058764547, 8.8448126916773617e-05, 0.00019181997049599886, 0.00024511478841304779, 0.00032077898504212499, 0.00020892229804303497, 0.00017051133909262717, 0.00043858494609594345, 0.00024381013645324856, 0.00020764007058460265, 0.0001472915755584836, 0.00026612111832946539, 6.8190202000550926e-05, 8.2825696154031903e-05, 0.00018010122585110366, 0.00013259808474685997, 0.00015473684470634907, 0.00011725958756869659, 0.00010014283179771155, 6.9817244366277009e-05, 0.00025098156766034663, 0.00036291914875619113, 0.00015145966608542949, 9.155527368420735e-05, 0.00032385403756052256, 0.00027322943788021803, 0.00015359553799498826, 0.00020183151355013251, 0.00029651029035449028, 0.00011128967889817432, 0.00019382416212465614, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -30,117,26,-127,-33,-28,-24,-81,-53,22,-41,54,2,-103,-21,41, 
  /* [1][0][][] */ -17,2,-19,55,-90,-9,54,-77,90,61,-57,102,69,58,-52,-127, 
  /* [2][0][][] */ -63,68,-103,-18,13,56,-13,-25,116,1,22,57,29,62,-127,-8, 
  /* [3][0][][] */ 93,-55,62,-36,29,-39,-30,-27,53,-33,54,-43,-20,41,11,127, 
  /* [4][0][][] */ -127,11,80,51,40,50,-42,42,13,8,13,-4,-58,5,-41,4, 
  /* [5][0][][] */ -42,91,58,15,-3,83,-45,105,-22,114,-35,-6,85,-36,-127,-31, 
  /* [6][0][][] */ 95,-63,127,-115,41,-64,-68,69,-117,-116,14,-74,-28,74,12,65, 
  /* [7][0][][] */ 7,127,-24,-22,62,36,17,-14,82,37,-37,-10,51,-24,15,28, 
  /* [8][0][][] */ 3,-42,9,-102,55,-46,37,-74,6,54,66,-87,-15,127,117,41, 
  /* [9][0][][] */ -3,-88,-77,127,53,-16,63,-60,-64,120,73,16,1,-81,27,-30, 
  /* [10][0][][] */ -7,-19,-34,-127,8,-25,-17,8,24,-14,26,15,-17,-57,14,56, 
  /* [11][0][][] */ 6,64,84,-1,103,-46,102,-77,-109,32,-38,-6,5,127,-68,-49, 
  /* [12][0][][] */ 3,58,-84,-43,7,-127,8,-88,-12,23,-94,-66,-41,120,90,63, 
  /* [13][0][][] */ -2,-1,-20,8,10,-127,-19,-7,-11,-28,-1,-14,-11,-6,37,25, 
  /* [14][0][][] */ 39,-13,106,-19,31,-43,-127,-124,-67,-55,-16,-45,-8,-42,10,-27, 
  /* [15][0][][] */ -72,23,-92,-76,15,25,127,25,-17,32,86,22,-22,-16,0,-14, 
  /* [16][0][][] */ -59,63,64,49,-6,62,118,94,18,59,-51,115,10,-57,-40,-127, 
  /* [17][0][][] */ -50,-127,-21,24,-65,-11,-38,23,-75,-11,17,-2,4,37,39,-20, 
  /* [18][0][][] */ -55,8,-28,68,-25,46,23,51,104,78,8,4,25,127,52,28, 
  /* [19][0][][] */ 45,-19,52,10,60,14,-92,-90,-127,-105,-22,-124,-60,-13,28,-46, 
  /* [20][0][][] */ 40,10,-83,-8,-67,-78,26,36,2,91,-127,23,39,0,38,-15, 
  /* [21][0][][] */ -15,-61,-10,-50,-21,44,-12,72,10,-70,127,71,6,55,-14,52, 
  /* [22][0][][] */ -33,108,-5,127,-32,7,52,44,-23,28,-33,29,1,-30,19,-36, 
  /* [23][0][][] */ 4,-31,22,-43,-11,0,23,91,74,122,10,67,30,-71,-127,9, 
  /* [24][0][][] */ -100,69,-7,-17,14,125,71,-18,15,38,127,11,-63,-11,48,-3, 
  /* [25][0][][] */ 62,55,25,35,7,-20,76,-33,-12,-127,-36,-50,-4,-37,35,50, 
  /* [26][0][][] */ -39,-37,-1,11,-49,-23,-53,-47,-127,-38,16,-11,-9,102,-53,37, 
  /* [27][0][][] */ -40,48,-7,67,15,-10,-4,-2,89,37,-32,32,36,127,-26,-8, 
  /* [28][0][][] */ 28,67,62,34,127,-18,30,13,-105,-36,-48,-81,4,51,73,-26, 
  /* [29][0][][] */ 49,-5,65,38,29,-46,7,-16,-73,-57,-30,-127,19,-5,-38,31, 
  /* [30][0][][] */ -12,100,-26,81,-28,-14,38,-127,-61,45,-49,-30,57,18,90,76, 
  /* [31][0][][] */ -94,-8,-53,-97,-58,25,-21,-47,89,127,-2,-96,26,-34,39,-17, 
  /* [32][0][][] */ -127,-51,-22,91,25,54,-3,25,25,-24,-111,83,117,8,43,64, 
  /* [33][0][][] */ -1,13,-56,12,-106,-21,-48,22,62,41,-38,-58,25,-127,120,31, 
  /* [34][0][][] */ 64,-23,54,-18,60,6,-54,79,-101,-56,94,-20,-29,-31,31,127, 
  /* [35][0][][] */ -28,43,-74,-12,-12,-52,-17,-101,38,44,-72,-38,-47,52,127,-62, 
  /* [36][0][][] */ -42,-60,-82,28,-35,3,115,17,56,96,55,84,42,22,-62,-127, 
  /* [37][0][][] */ -43,46,-17,-60,-1,26,0,-6,-24,23,8,0,19,-127,30,-49, 
  /* [38][0][][] */ 32,68,-45,-30,127,9,27,-28,101,49,-16,-8,48,-49,50,37, 
  /* [39][0][][] */ -54,121,-29,-127,-30,45,-24,63,80,-31,-19,17,40,54,10,57, 
  /* [40][0][][] */ -29,-61,-30,-127,-48,-6,17,-3,-65,26,41,7,5,-106,77,-17, 
  /* [41][0][][] */ -42,-19,-76,-98,5,-2,44,1,-16,40,-15,-3,-127,1,36,32, 
  /* [42][0][][] */ 126,47,-72,-127,-75,-88,-10,-51,-3,15,103,-26,-84,9,101,-49, 
  /* [43][0][][] */ -54,113,-122,-24,50,108,127,15,75,46,-45,25,99,-94,-49,-14, 
  /* [44][0][][] */ -32,-53,-67,-121,34,12,-74,-127,0,1,95,46,-18,-83,83,-43, 
  /* [45][0][][] */ -40,48,-127,-41,47,28,47,-17,33,42,34,-19,38,-72,3,-8, 
  /* [46][0][][] */ -25,0,-30,-78,-24,41,19,-8,-94,-8,-20,38,-8,-127,85,-60, 
  /* [47][0][][] */ -15,75,7,-4,127,47,-3,34,-20,87,3,65,66,-10,102,-27, 
  /* [48][0][][] */ -127,-36,-6,55,52,40,1,11,21,-3,-96,73,68,13,52,9, 
  /* [49][0][][] */ 11,-1,17,-22,113,-17,-18,-5,-127,-61,23,-75,-69,57,27,-66, 
  /* [50][0][][] */ -14,39,-52,-1,21,-127,-3,-31,2,-25,-53,-26,-25,43,43,19, 
  /* [51][0][][] */ -52,33,25,-13,45,86,10,23,-71,53,4,-50,23,-127,-42,25, 
  /* [52][0][][] */ 11,120,18,90,89,30,44,60,97,127,-113,-52,94,89,64,27, 
  /* [53][0][][] */ 1,-10,-17,37,-127,-18,-67,13,42,36,-38,-20,39,-102,83,-14, 
  /* [54][0][][] */ 27,75,-35,39,127,98,-67,-5,-39,26,-59,-56,33,-72,-48,-69, 
  /* [55][0][][] */ 62,-6,45,14,34,-41,-71,-127,-80,-100,-48,-56,-20,-13,47,3, 
  /* [56][0][][] */ -10,10,45,14,6,-35,-100,120,5,127,-44,-19,43,35,-3,20, 
  /* [57][0][][] */ -23,20,-36,-27,-15,-34,127,73,-15,34,-2,16,26,10,80,-8, 
  /* [58][0][][] */ 4,19,-126,-73,90,77,-64,34,-127,-81,49,-25,-77,41,61,-103, 
  /* [59][0][][] */ -56,71,42,11,-38,-10,127,96,50,38,23,12,41,-26,21,-20, 
  /* [60][0][][] */ -20,-34,-127,-117,14,-108,50,31,-1,9,58,25,85,-66,-26,12, 
  /* [61][0][][] */ -1,-4,35,127,67,40,8,19,-95,-3,1,26,0,9,32,-72, 
  /* [62][0][][] */ -57,127,-18,-46,-14,20,7,45,-19,-24,-85,-34,5,-96,-4,-27, 
  /* [63][0][][] */ -76,19,-29,127,-104,27,-59,-19,-38,8,-52,-25,41,41,58,17, 
  /* [64][0][][] */ -23,80,25,71,-9,11,-20,108,32,20,-29,-47,16,-127,26,-10, 
  /* [65][0][][] */ -9,-5,15,-83,50,-25,39,-39,-31,19,-21,-127,-21,-21,42,-57, 
  /* [66][0][][] */ 8,-34,-14,-44,-36,-9,8,94,28,-43,74,65,-11,127,-2,61, 
  /* [67][0][][] */ -39,103,21,-73,-11,50,-41,66,127,-69,-42,-18,74,87,-1,36, 
  /* [68][0][][] */ -6,3,127,-25,27,-12,-18,-33,-97,-66,7,-92,-32,-24,88,-25, 
  /* [69][0][][] */ 127,26,45,33,-40,-35,-34,-43,-42,-7,84,-102,-54,11,51,-54, 
  /* [70][0][][] */ 22,11,-72,-1,-32,32,44,127,-37,110,-47,24,-2,50,-28,0, 
  /* [71][0][][] */ -6,-54,-22,-33,-28,-34,12,42,-16,31,-34,34,-127,-9,46,85, 
  /* [72][0][][] */ -29,37,-127,41,10,38,120,98,-6,23,26,0,48,13,-17,-12, 
  /* [73][0][][] */ -18,24,60,19,52,-33,-75,-127,-19,-90,15,-77,6,-30,44,-17, 
  /* [74][0][][] */ -27,34,3,127,-16,-7,-62,98,-54,36,-65,79,70,-104,17,-86, 
  /* [75][0][][] */ -46,63,-60,-14,-17,26,49,15,127,39,23,36,59,50,-58,2, 
  /* [76][0][][] */ -27,-14,-9,0,9,5,15,83,42,-23,-21,-127,12,4,-7,25, 
  /* [77][0][][] */ -94,2,-49,71,-74,68,96,91,68,57,78,127,12,-23,-51,-39, 
  /* [78][0][][] */ 3,-33,24,-87,19,-31,-58,23,43,-51,60,28,-14,127,2,28, 
  /* [79][0][][] */ -27,-127,-76,-48,-100,4,-3,-94,126,18,38,104,11,-4,37,-57, 
  /* [80][0][][] */ -67,43,79,10,-13,-11,7,-3,7,63,-67,-45,33,127,70,-35, 
  /* [81][0][][] */ -40,22,-127,-1,30,-91,-5,36,-2,-23,55,10,19,-34,1,-8, 
  /* [82][0][][] */ 109,5,26,44,-12,-89,-18,37,-2,22,-117,18,127,-6,-15,28, 
  /* [83][0][][] */ -33,15,-126,-122,-16,-5,14,-127,10,11,19,-89,-39,15,26,124, 
  /* [84][0][][] */ -106,76,34,-71,-20,7,119,-95,38,115,16,9,127,37,31,-19, 
  /* [85][0][][] */ -77,127,3,-87,-63,-11,1,8,-22,18,-58,29,34,-13,-99,-34, 
  /* [86][0][][] */ -34,23,-56,24,-51,-30,127,26,18,22,-30,31,44,13,85,-50, 
  /* [87][0][][] */ -47,-13,-20,-95,-24,-7,77,9,19,54,-21,-127,26,-5,12,-55, 
  /* [88][0][][] */ 66,51,30,46,-7,-88,-4,39,-45,25,-127,-3,18,2,42,-18, 
  /* [89][0][][] */ 4,2,-74,-70,32,19,0,10,-2,36,45,-27,127,-39,10,-46, 
  /* [90][0][][] */ 1,-45,34,-52,90,36,-68,51,36,-85,0,-38,-7,67,14,-127, 
  /* [91][0][][] */ -93,-9,-58,-127,10,-13,-71,-35,8,24,-32,-94,-37,20,85,-25, 
  /* [92][0][][] */ 3,26,48,13,1,-127,6,-7,-20,-33,-8,-43,-7,-30,34,17, 
  /* [93][0][][] */ 10,-37,127,3,-87,121,53,-8,9,46,-108,22,-6,5,57,-19, 
  /* [94][0][][] */ 64,-20,-53,-88,50,-22,-35,-29,-127,-41,60,-112,103,-49,69,-39, 
  /* [95][0][][] */ 81,70,-33,34,-127,-19,-34,15,27,49,71,9,12,41,86,-89, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00072453467873856425, 0.00057506508892402053, 0.00049314892385154963, 0.00092555308947339654, 0.00081847468391060829, 0.00078350555850192904, 0.00036934521631337702, 0.00082477077376097441, 0.00042850204044952989, 0.00095438800053671002, 0.00034688037703745067, 0.00048523524310439825, 0.00066597299883142114, 0.002796883461996913, 0.00042048492468893528, 0.00029646896291524172, 0.00020992616191506386, 0.00071138859493657947, 0.00093563052359968424, 0.00054819980869069695, 0.00031260229297913611, 0.00020674781990237534, 0.00032535623176954687, 0.00015099806478247046, 0.00036771438317373395, 0.00075935834320262074, 0.0014078414533287287, 0.00060502969427034259, 0.0005058998940512538, 0.00068496528547257185, 0.00049815431702882051, 0.00063490704633295536, 0.00040925492066890001, 0.00059550086734816432, 0.00058536516735330224, 0.00075653742533177137, 0.00034978039911948144, 0.00052212708396837115, 0.00074000470340251923, 0.0007767727947793901, 0.00027833937201648951, 0.00060340372147038579, 0.00053451652638614178, 0.00035693217068910599, 0.000597332080360502, 0.00041594673530198634, 0.00061156949959695339, 0.00041409331606701016, 0.0006305997958406806, 0.00062783906469121575, 0.00074126507388427854, 0.00052082212641835213, 0.00073501502629369497, 0.0006883402238599956, 0.00090256769908592105, 0.00061487610219046474, 0.00074252072954550385, 0.00084206054452806711, 0.00044586334843188524, 0.00046525051584467292, 0.00087293237447738647, 0.0012198531767353415, 0.00070567248621955514, 0.0010265616001561284, 0.00082484708400443196, 0.00054951553465798497, 0.00024587981170043349, 0.00053324655164033175, 0.00068140256917104125, 0.00089174386812373996, 0.00058078987058252096, 0.00047400998300872743, 0.0012192365247756243, 0.00067777570802718401, 0.00057722534984350204, 0.00040946062654256821, 0.00073979870649054646, 0.00018956414714921266, 0.00023024984693620354, 0.00050066923722624779, 0.00036861372063867748, 0.00043015796109102666, 0.00032597372774034739, 0.00027839030371978879, 0.00019408721709623933, 0.0006977118318900466, 0.0010088906856253743, 0.00042104761814698577, 0.00025451747933402658, 0.00090029230341315269, 0.00075955933425575495, 0.00042698520701378584, 0.00056107796262949705, 0.00082427856978029013, 0.00030937779229134321, 0.00053881807252764702, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -9814, 28824, -15631, 3973, -8291, 11266, 20992, -42125, 92, 22515, 13413, 13759, -20050, -7683, -991, 19033, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00044740160228684545, 0.00056634040083736181, 0.00021414387447293848, 0.00033397180959582329, 0.00034968313411809504, 0.00026502201217226684, 0.00027543300529941916, 0.00022436083236243576, 0.00025733327493071556, 0.00021746735728811473, 0.00052322971168905497, 0.00049479393055662513, 0.00018698231724556535, 0.00027119339210912585, 0.00040331887430511415, 0.0003287358267698437, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -4,-34,14,-31,38,-1,-49,3,14,19,-26,-5,-13,3,-36,9,-5,-5,5,5,40,-43,32,-3,-5,25,31,123,39,-50,21,-7,-3,57,34,22,-19,-24,-12,3,-87,40,-31,57,3,-67,-34,13,18,6,-19,-77,25,2,-26,111,-5,10,8,-37,-23,34,-17,-14,-44,-58,-11,45,-23,2,40,5,-13,4,18,-21,50,11,39,14,5,-75,20,2,-63,-36,-39,-127,11,-12,-16,-9,71,-51,-48,5, 
  /* [1][0][][] */ -1,-96,-41,-50,37,-5,31,38,-22,11,-42,-19,-30,-37,-71,-7,-20,-12,25,70,-2,37,14,-28,11,21,-89,-8,-33,-26,-51,-16,-13,3,14,16,11,-19,20,17,-99,11,-37,-36,-79,32,37,-45,0,1,-26,-62,-43,36,-35,34,-127,-44,-13,15,-1,-47,2,-74,-52,79,8,-29,-9,-19,-43,-2,-33,-93,-55,-6,-42,-82,36,6,-42,-97,11,40,-22,16,-67,67,-3,-50,7,30,28,-18,-67,26, 
  /* [2][0][][] */ 53,57,-33,7,53,73,21,62,13,-109,4,-48,9,4,15,21,8,-16,-3,14,59,-8,66,19,15,18,4,-20,19,20,21,-49,36,44,11,86,-81,-59,100,17,-108,-18,-3,-2,37,-77,-63,46,-18,6,-21,-102,34,-4,-34,97,12,-2,40,7,-26,26,7,1,32,-6,-11,-1,-80,13,31,-19,-48,-13,5,38,127,46,57,-2,48,-104,-21,0,-115,-12,-72,-8,49,59,-60,-34,28,-29,-36,47, 
  /* [3][0][][] */ -13,20,83,-3,-10,-12,6,43,-18,-37,35,-41,18,0,14,48,-4,-29,60,32,79,-5,45,13,14,1,-48,31,-23,15,-5,47,-44,-16,14,40,-36,-39,34,10,-127,12,16,-3,23,-33,-43,-66,-21,-15,-32,-46,0,-63,-50,48,-27,13,52,-3,-10,25,-38,-3,48,29,12,-54,-18,-15,8,-11,-40,-12,37,-1,57,-1,-3,16,-2,-85,-22,10,-40,6,-51,12,21,5,-11,8,53,36,-5,9, 
  /* [4][0][][] */ 5,40,41,-15,65,13,10,16,3,-35,18,-88,-34,28,-18,65,14,-87,21,87,25,-31,42,20,-31,-8,-29,-7,-18,-37,11,-52,52,-12,-11,73,9,-7,32,14,-127,27,-49,-57,6,-100,-45,13,13,-5,-18,-121,-24,-25,-35,67,-16,-27,0,46,-46,48,11,-2,52,30,-14,-15,-92,-29,33,51,-54,-71,-64,-17,87,42,80,-25,-24,-97,-16,-14,-118,-48,-28,29,-32,52,-24,-28,36,-18,-28,10, 
  /* [5][0][][] */ -7,26,2,32,-29,-35,27,-30,-9,-98,-1,19,24,21,16,39,-28,-14,21,14,39,15,-43,67,19,-28,-8,-87,-14,27,30,28,-1,-25,-2,-81,27,60,-58,-7,69,-26,26,-55,28,82,45,8,9,-28,26,84,-11,-43,33,-64,50,17,-61,-20,50,-9,-32,43,-24,25,-27,52,25,73,12,32,54,-7,20,38,-56,13,-7,7,-44,45,-6,52,-6,56,47,127,24,19,2,-11,-21,72,-17,-14, 
  /* [6][0][][] */ 19,-50,-6,-20,-52,2,45,-9,-13,-1,-21,-35,-17,-28,-22,1,-12,-4,-6,22,-57,24,0,26,-10,2,-60,-17,-35,15,28,-2,19,-64,36,-39,9,-7,-12,-56,25,53,4,-52,-22,69,3,-3,-1,10,-44,127,-24,-45,-22,-35,9,-28,-53,-9,2,34,-15,-54,3,-8,13,-6,2,15,70,12,-32,-10,-49,-10,-115,0,-25,-20,-4,43,26,10,39,7,91,50,14,-20,51,-25,-30,39,-18,-23, 
  /* [7][0][][] */ -22,113,4,48,59,17,38,-53,-19,-15,5,16,14,18,23,9,-12,-25,0,40,-10,-1,-7,26,24,-5,-2,5,10,15,16,30,29,-65,-38,-16,37,43,-57,55,68,-20,38,-10,-20,77,57,-8,7,-18,13,127,12,-43,14,-40,56,24,-68,-18,27,-34,-16,8,-68,66,-16,-63,25,9,-3,41,31,-47,37,-26,-44,60,-2,-41,-55,25,-24,5,44,70,56,16,-9,-1,-3,-33,-72,63,46,-52, 
  /* [8][0][][] */ -52,-13,29,23,-96,-38,45,-43,13,106,24,22,-9,9,9,27,-57,18,-7,17,-42,6,-100,69,19,-36,29,-13,13,10,1,24,7,-29,-20,-22,22,11,-58,28,101,-42,53,38,-55,70,75,31,-52,23,-19,125,-52,-47,9,-13,23,-42,-82,-8,53,-25,-18,8,-8,36,-23,-40,65,-11,-52,-24,72,13,44,-16,-89,-57,-50,-17,-92,69,6,5,88,48,127,43,3,-44,64,43,-25,39,37,-37, 
  /* [9][0][][] */ -56,-98,-25,15,43,30,-26,-37,-15,6,48,74,-28,4,50,-93,-27,-16,-12,26,-105,-20,-7,2,0,-15,-43,27,-24,17,20,-5,9,-60,-71,-9,19,30,-46,37,127,-55,33,36,-17,90,29,-30,40,28,-11,60,33,9,-11,-95,6,57,-45,0,50,-56,-51,77,-93,-1,-7,-30,30,50,-60,-60,76,-23,10,0,-40,-50,-47,-30,-33,51,0,13,74,-14,100,19,-4,-64,2,32,-66,50,17,-80, 
  /* [10][0][][] */ -15,12,-37,-14,-18,-33,70,-39,58,-63,22,42,33,7,31,26,6,37,-42,-35,12,15,7,7,-10,-25,54,-127,36,-19,61,-30,4,43,-9,-50,23,61,-2,-2,74,-72,33,-47,26,71,41,35,-1,19,-10,97,-25,-10,17,-64,47,31,-59,-33,34,17,-41,38,-13,56,-7,-16,33,-16,23,-13,16,5,22,34,-1,39,-7,18,-33,77,13,43,-18,2,66,79,33,27,-18,0,-6,26,41,-34, 
  /* [11][0][][] */ -78,16,-20,30,-2,-51,-5,-26,-33,-18,-21,37,26,24,-6,5,17,7,-48,-22,-27,2,-32,1,58,-8,51,-9,-17,14,-8,21,-26,-3,-12,-34,12,21,-45,5,100,-19,25,-3,55,97,73,26,45,29,-5,127,6,-56,43,-70,-6,1,-61,-43,16,-9,-13,29,-26,-28,14,3,55,16,-13,16,33,-4,41,-16,-73,69,-114,21,-38,56,-50,-44,125,55,98,12,12,19,2,-32,-41,75,15,-40, 
  /* [12][0][][] */ -47,39,-18,1,55,6,19,-24,21,19,30,0,52,-8,24,-28,-60,0,-33,-5,-58,22,-85,85,8,12,-106,127,-19,79,-25,9,3,-57,31,-15,32,22,-15,-14,69,-41,48,-18,-46,115,81,29,37,14,-2,73,-20,-14,7,-84,3,-14,-34,77,-3,-38,-29,21,53,-66,-1,43,14,-121,-55,10,31,-30,34,75,-65,6,-71,-3,-21,82,-25,25,80,-27,42,-3,40,-15,30,2,-72,78,-30,-21, 
  /* [13][0][][] */ -59,41,-27,3,-11,12,8,6,-50,82,41,-3,80,13,-23,18,-30,-5,-4,16,7,-26,59,-33,43,77,-23,-4,-28,-32,-48,-68,-75,-51,13,16,5,-18,52,34,-110,83,8,45,62,-8,-36,19,23,-35,3,-8,27,-9,-2,22,-68,54,45,21,-46,35,-25,11,-83,23,17,20,28,37,31,-76,-43,-30,-127,-8,37,25,6,-36,122,-86,12,-15,17,-7,-27,34,-49,-9,31,11,8,-47,-45,50, 
  /* [14][0][][] */ -8,-17,5,-59,74,12,-25,17,-74,57,23,2,-34,-47,-82,-29,-50,-4,43,-5,37,-4,37,-100,-47,49,-18,-16,8,-16,-37,-30,-30,22,15,38,-13,-24,43,-1,-85,88,-68,17,-51,-82,-48,4,92,0,35,-127,47,41,-88,59,-75,5,-38,19,-17,18,83,6,15,30,-9,9,-55,10,46,30,-6,11,-17,39,106,-71,1,-29,28,-85,8,-4,1,-83,-91,7,-70,22,23,32,46,-57,4,17, 
  /* [15][0][][] */ -29,-127,-23,-66,-10,46,16,-95,-26,-4,-53,-31,31,-4,35,-29,-107,55,-35,-11,-62,-3,-41,-111,12,-15,-36,-4,32,-53,63,-91,-11,38,5,-25,-20,22,-72,17,95,-98,41,86,-68,-64,90,29,23,-5,-11,-64,-9,97,56,45,33,8,-52,32,30,36,70,8,15,-32,1,14,4,55,-7,43,-52,7,-16,-24,-88,-7,39,10,0,122,15,86,28,-11,-31,-62,-43,15,16,92,-31,1,-14,6, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.019014567136764526, 0.024069467559456825, 0.0091011142358183861, 0.014193802140653133, 0.014861532486975193, 0.011263435706496239, 0.011705902405083179, 0.0095353350043296814, 0.010936664417386055, 0.009242362342774868, 0.022237261757254601, 0.02102874219417572, 0.007946748286485672, 0.011525719426572323, 0.017141051590442657, 0.013971271924674511, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 28439, 54811, -2260, -3679, 16166, -5641, 630, -4403, 2609, 12679, -3299, 1547, -1166, 2675, 2069, -10884, -5660, -1223, -4073, 5236, -13744, 11510, -4494, 5834, 14897, -1139, 978, 17376, 12221, -16906, 1203, 26986, 25419, -18467, 2871, -286, 442, -1567, 1230, -11934, -4484, 3511, -5523, 1226, 27888, -18, 7105, -3624, -15054, -4828, -293, -1794, -4113, 18868, -5924, 13792, 3483, -187, 51082, 1665, -8675, -39, 100, -1035, -3495, 14492, -332, -6605, -670, 2095, 1144, -7422, 863, -1801, -3996, -8136, -1039, -2624, 31164, -7062, -4191, -6731, 1139, 2930, 39859, -14090, -7855, -26079, -5247, 12044, -1344, 33492, -426, 298, -3151, 1793, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 7.753021054668352e-05, 0.00010253360960632563, 0.00010390536044724286, 0.0002255590952700004, 0.00021658148034475744, 0.00013940159988123924, 5.8813162468140945e-05, 7.7126962423790246e-05, 0.00018605247896630317, 0.00020633410895243287, 0.00028579574427567422, 0.00011282994819339365, 0.00023417027841787785, 0.0002119330019922927, 0.00045096449321135879, 0.00012134396092733368, 0.00017951974587049335, 0.00012901295849587768, 0.00017535539518576115, 0.00010279938578605652, 8.0693615018390119e-05, 4.9785387091105804e-05, 0.00015158597670961171, 0.00012779593816958368, 6.2361803429666907e-05, 0.00016408431110903621, 0.00015060642908792943, 0.00018488938803784549, 7.3006507591344416e-05, 0.00052783050341531634, 0.00034495539148338139, 0.00024581560865044594, 9.0629095211625099e-05, 7.3497598350513726e-05, 0.00022262697166297585, 0.0003730688476935029, 0.0003544539213180542, 0.00024406563898082823, 0.00027812860207632184, 5.9548488934524357e-05, 0.00022144601098261774, 0.0002065484004560858, 0.00032913486938923597, 0.00010603563714539632, 0.00026511153555475175, 0.00012622390931937844, 0.00012635404709726572, 0.00020301695622038096, 0.00059347844216972589, 7.7185286500025541e-05, 0.00069303478812798858, 0.00020380091154947877, 0.00013551562733482569, 0.00014773118891753256, 0.00014678193838335574, 0.00014599626592826098, 0.00071998214116320014, 0.00041322613833472133, 3.7040506867924705e-05, 0.00020591515931300819, 0.00027757100178860128, 0.0003012495581060648, 0.00011144983727717772, 0.00014236808056011796, 0.00012156436423538253, 0.00011271189578110352, 0.00022670811449643224, 0.00035129507887177169, 0.00022460181207861751, 8.8314991444349289e-05, 0.00021227821707725525, 7.7644821431022137e-05, 0.00020851580484304577, 0.00013750849757343531, 0.00017464399570599198, 0.00023736123694106936, 0.0001455896272091195, 8.583848102716729e-05, 8.6945095972623676e-05, 0.00020694077829830348, 0.000183932512300089, 0.00023567152675241232, 0.00017592884250916541, 0.00026977137895300984, 7.6654716394841671e-05, 9.7009484306909144e-05, 9.7178177384193987e-05, 0.00050527614075690508, 0.00029149596230126917, 9.2345915618352592e-05, 0.00040082490886561573, 2.6931742468150333e-05, 0.00016341167793143541, 0.0001407758827554062, 0.00036240651388652623, 0.00032701491727493703, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -46,-70,-7,127,22,69,63,-53,-8,-22,-9,-14,-23,5,42,-8,-10,-56,28,32,27,-127,127,6,-103,4,50,-34,-125,-127,40,17,14,68,62,-26,-40,0,22,-2,-28,25,-107,88,31,-72,61,49,-20,62,-26,28,3,-9,40,51,-89,-49,-47,-29,-11,-14,25,50,74,-29,64,8,-2,18,22,127,29,22,33,-6,-13,18,127,-4,-16,31,-31,20,120,18,-68,-16,7,-54,-23,-38,8,-37,-12,22, 127,-125,65,109,-42,127,41,-108,72,-3,-18,118,127,-103,-15,8,18,127,126,-95,127,-77,85,67,-113,-103,-78,-34,-45,46,-57,-27,-95,126,-127,-93,-54,-14,-38,55,0,127,127,79,-44,-93,-127,-52,-16,-127,44,90,73,-40,54,81,-49,44,-85,-111,-61,-43,-58,63,74,-66,14,24,-85,33,-24,87,127,127,-4,25,10,54,-19,53,74,89,127,-26,-13,81,-104,127,-127,-110,6,-127,-81,-127,-39,100, -81,-30,33,-69,17,-38,99,-15,87,-44,-24,31,-16,-1,-10,-29,-10,-12,12,8,18,-102,29,18,-119,89,-11,-57,127,52,-16,1,8,28,3,-45,-17,35,20,17,39,14,-126,64,17,-42,50,9,-16,12,-15,6,-13,-3,9,26,-67,4,-50,56,-11,44,27,-1,-10,-37,-25,19,20,-1,-17,42,13,-18,-20,9,-19,-8,-86,4,-28,-58,-31,-3,-116,0,-52,-23,-56,8,-26,-12,26,-36,-16,0, 
  /* [0][1][][] */ -64,-63,75,-36,-47,81,10,127,-49,-23,7,-127,28,-97,87,28,3,-75,-18,89,44,-60,42,60,-97,-11,127,-23,-28,53,122,-122,-127,124,-86,-49,-42,29,-35,113,-53,-32,-1,46,-48,127,-12,73,14,106,17,-2,11,-51,40,20,127,127,-65,-83,127,-44,-27,127,74,-38,-25,-2,115,49,127,92,-47,97,10,16,9,12,-34,15,-53,127,-83,108,0,29,-35,28,79,-127,-35,-2,127,-67,-18,-2, 64,127,55,-110,127,77,97,49,-127,127,127,-44,-53,-127,-127,127,127,-66,-127,-43,73,75,-113,127,-127,-77,-42,127,-110,100,-127,-127,-91,127,113,127,127,-127,-86,127,-58,-103,104,-127,-127,-21,-117,-127,127,-114,78,50,127,127,127,-127,94,-125,-127,127,15,-75,-127,-97,-127,127,-127,127,-127,-127,-101,-75,-124,-74,127,127,-127,127,-68,127,127,15,-44,-127,51,127,88,46,125,19,127,-3,-64,40,127,-127, -55,-14,-43,45,-55,-108,52,-29,23,-39,-32,83,2,93,13,4,-10,72,-2,127,16,-83,-43,14,-87,88,-92,-17,-61,-14,14,-76,-75,56,-5,-26,-38,44,-65,52,127,-16,-42,21,-43,-73,26,43,7,119,-12,1,-42,-69,11,20,96,-2,-14,20,-46,127,88,-55,-45,17,37,-13,-66,115,-26,-72,-6,-53,-25,-19,26,19,61,-29,-81,-69,47,6,-48,-18,53,21,6,55,-50,30,-43,83,-23,-5, 
  /* [0][2][][] */ -66,12,-4,-23,10,-44,73,35,56,-32,-40,-16,20,34,-20,9,-1,63,13,0,-33,-49,5,-24,3,-56,19,-70,74,33,30,22,12,16,-17,-37,-7,39,-3,18,-32,-16,-75,115,2,36,30,41,-14,-19,13,-25,19,-9,-7,9,-68,27,-33,10,37,-6,-23,-5,6,-40,-54,19,-37,10,29,30,8,-20,36,6,20,2,-75,-8,-15,20,18,10,-127,12,32,-43,-66,-47,-20,-54,10,54,-16,-13, 115,40,-127,-29,-73,-28,52,50,-63,-37,-29,-110,-67,113,-4,48,7,-59,-7,-124,99,-15,-25,-19,-113,127,-65,22,-40,-21,-7,7,-74,17,29,21,-28,-33,127,52,5,-23,51,-38,-41,80,-72,-43,-31,3,-127,-127,-56,-31,-27,46,-71,-8,-13,24,-2,-22,-2,-49,-47,36,50,-16,98,116,-25,-70,17,-55,6,7,108,8,44,20,7,-95,-50,-5,-6,16,127,41,-54,46,-8,-124,40,77,-11,28, -60,19,-25,34,12,-71,-127,22,-16,-8,-24,-7,15,-29,17,7,-13,-15,14,21,-40,-46,23,-8,22,-95,5,10,-67,-36,-9,11,38,-10,-21,-50,-41,4,38,-36,24,-13,-56,-41,-3,56,33,17,-8,0,10,-20,19,-4,0,-10,-68,-20,-53,-60,-11,19,101,-23,40,5,-8,26,-5,-1,-10,23,-26,8,7,17,44,4,76,-11,-1,-20,-17,-26,66,12,45,-40,61,23,-16,-74,-18,0,-16,-20, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0032950339373201132, 0.0043576783500611782, 0.0044159777462482452, 0.009586261585354805, 0.0092047126963734627, 0.0059245680458843708, 0.0024995594285428524, 0.0032778957393020391, 0.007907230406999588, 0.0087691992521286011, 0.012146318331360817, 0.0047952728345990181, 0.0099522368982434273, 0.0090071521699428558, 0.019165990874171257, 0.005157118197530508, 0.0076295891776680946, 0.0054830503650009632, 0.0074526043608784676, 0.004368973895907402, 0.0034294785000383854, 0.0021158789750188589, 0.0064424038864672184, 0.0054313270375132561, 0.0026503766421228647, 0.0069735832512378693, 0.0064007728360593319, 0.0078577985987067223, 0.0031027763616293669, 0.022432794794440269, 0.014660604298114777, 0.010447163134813309, 0.0038517364300787449, 0.0031236477661877871, 0.0094616459682583809, 0.015855425968766212, 0.015064291656017303, 0.010372789576649666, 0.011820465326309204, 0.0025308106560260057, 0.0094114551320672035, 0.0087783066555857658, 0.013988232240080833, 0.0045065144076943398, 0.011267240159213543, 0.0053645158186554909, 0.0053700469434261322, 0.008628220297396183, 0.025222834199666977, 0.0032803746871650219, 0.029453977942466736, 0.0086615383625030518, 0.0057594138197600842, 0.0062785753980278969, 0.0062382323667407036, 0.0062048411928117275, 0.030599240213632584, 0.017562109977006912, 0.001574221532791853, 0.0087513942271471024, 0.011796767823398113, 0.012803105637431145, 0.0047366181388497353, 0.0060506435111165047, 0.0051664854399859905, 0.0047902553342282772, 0.009635094553232193, 0.014930040575563908, 0.0095455767586827278, 0.0037533871363848448, 0.0090218242257833481, 0.0032999049872159958, 0.0088619217276573181, 0.0058441110886633396, 0.0074223694391548634, 0.010087852366268635, 0.0061875591054558754, 0.0036481353454291821, 0.0036951664369553328, 0.0087949829176068306, 0.0078171314671635628, 0.010016039945185184, 0.0074769756756722927, 0.011465283110737801, 0.0032578252721577883, 0.0041229031048715115, 0.0041300724260509014, 0.021474234759807587, 0.012388578616082668, 0.0039247013628482819, 0.01703505776822567, 0.0011445990530773997, 0.0069449963048100471, 0.0059829750098288059, 0.015402276068925858, 0.013898134231567383, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 887, 10421, 30225, 29279, 38500, -3784, -4149, 9499, 41007, -6710, 17572, 6338, 11568, 12475, 38671, 3850, 3796, 6513, 19944, 5984, -890, 1378, 16674, -2534, 6375, -1121, 13101, 13842, 7146, 53181, 94484, 27416, 9541, -916, 12552, 1994, 4509, 8897, 29897, -1073, 9539, 9524, 39008, -11364, 35050, 8374, 9708, 28560, 68136, 18015, -1667, 10088, -4483, -382, -4416, 5904, -6967, 61591, 6517, 12766, 13464, 14230, 9938, 11267, 13990, 26506, 10803, -7573, 10270, -4471, 13434, 13703, 16679, 12142, -3130, -6352, 7292, 716, 2780, -2934, 24647, 12162, 6641, 40348, 3891, 120, 13158, 89730, 10867, 14826, 11740, -1212, 10841, 12655, 8116, 15699, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00024763125111348927, 0.00013470498379319906, 6.9419271312654018e-05, 8.0192119639832526e-05, 8.2148741057608277e-05, 0.00027861987473443151, 0.000227711396291852, 0.00016929925186559558, 5.9525766118895262e-05, 0.00020263878104742616, 0.00015869573689997196, 0.0001556655770400539, 0.00010991683666361496, 0.00018912000814452767, 5.9615289501380175e-05, 0.00018108460062649101, 0.00017058443336281925, 0.00017594301607459784, 0.00011655529669951648, 0.00015836648526601493, 0.00023286702344194055, 0.00030428625177592039, 0.00011820470535894856, 0.00031490321271121502, 0.00039161514723673463, 0.00018586609803605825, 0.00017934558854904026, 0.00010863260831683874, 0.00021994157577864826, 6.7030930949840695e-05, 3.1643681722925976e-05, 9.2741669504903257e-05, 0.00017712196859065443, 0.00029261491727083921, 0.00013060485071036965, 0.00014513476344291121, 0.00014149895287118852, 0.00017017018399201334, 8.7829153926577419e-05, 0.00040253266342915595, 0.0001684408780420199, 0.00014292346895672381, 6.4862782892305404e-05, 0.00010385434870840982, 9.1481779236346483e-05, 0.00014650935190729797, 0.00014610160724259913, 9.6776268037501723e-05, 6.0070949984947219e-05, 0.00012268683349248022, 0.00015251019794959575, 0.00014419278886634856, 0.00022901035845279694, 0.00023811739811208099, 0.00024180380569305271, 0.00013882640632800758, 8.1436897744424641e-05, 3.3811840694397688e-05, 0.0003032111853826791, 0.00011241882748436183, 0.00013275674427859485, 9.6592229965608567e-05, 0.00014884346455801278, 9.3831389676779509e-05, 0.00018386353622190654, 7.7601827797479928e-05, 0.00012612194404937327, 0.00016860610048752278, 0.00016430659161414951, 0.00014145296881906688, 0.00010530673171160743, 0.0001180025574285537, 0.00012238448834978044, 9.8854383395519108e-05, 0.00042140705045312643, 0.00019373388204257935, 0.00022691993217449635, 0.00019395393610466272, 0.00022935571905691177, 0.00014297946472652256, 8.5649829998146743e-05, 0.00012403579603414983, 0.00013886328088119626, 5.157027771929279e-05, 0.00034153673914261162, 0.00019703160796780139, 0.00016335579857695848, 4.1844912630040199e-05, 0.0001265183964278549, 0.00014882138930261135, 0.0001044682358042337, 0.00020644464530050755, 0.0001212556817336008, 0.00012469416833482683, 0.0001387040683766827, 0.00010259552072966471, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ 27,19,-79,-5,5,73,22,25,69,16,9,127,19,-90,24,-37, 
  /* [1][0][][] */ -39,2,-127,-63,42,-101,41,-98,58,46,21,-46,1,-17,33,-3, 
  /* [2][0][][] */ -116,2,14,-55,-12,7,19,72,0,-4,127,13,-97,93,68,-22, 
  /* [3][0][][] */ -18,-7,15,34,-127,2,32,64,22,41,30,37,-15,-5,-105,-40, 
  /* [4][0][][] */ -75,-57,11,60,-27,103,12,127,76,16,12,9,11,-12,-81,-111, 
  /* [5][0][][] */ 0,-12,-22,-22,-4,-11,23,7,-20,127,-23,-42,16,-9,-54,-4, 
  /* [6][0][][] */ 36,42,-18,-56,75,91,-37,-61,9,10,74,0,127,-93,-25,-7, 
  /* [7][0][][] */ 67,2,28,-42,-127,11,59,18,-39,83,-47,-5,21,-68,99,31, 
  /* [8][0][][] */ 8,-24,127,50,-7,75,-71,54,68,-33,48,-70,-57,16,-68,-12, 
  /* [9][0][][] */ 22,-82,101,35,32,7,-35,-82,-4,-43,123,-28,-63,70,-127,109, 
  /* [10][0][][] */ -44,-127,75,46,-92,-41,-56,56,75,35,27,0,19,55,44,-51, 
  /* [11][0][][] */ -54,-46,-13,-41,-127,-9,-126,-58,-72,-56,26,-25,-6,46,11,59, 
  /* [12][0][][] */ 33,42,47,34,-32,21,-127,33,57,1,-17,2,26,126,77,-15, 
  /* [13][0][][] */ -2,-127,-43,-15,42,-52,-22,-73,25,-2,6,29,-11,-2,73,46, 
  /* [14][0][][] */ 7,-99,127,64,-21,-17,28,52,-65,73,28,-17,23,103,-103,53, 
  /* [15][0][][] */ 12,-43,-28,-11,4,-12,89,-19,-28,-127,77,-33,-14,-58,-26,-63, 
  /* [16][0][][] */ -13,-67,-127,-24,-51,39,37,18,61,33,63,17,25,60,112,61, 
  /* [17][0][][] */ 25,-99,49,12,73,7,29,61,45,-26,-94,-6,71,-49,-127,87, 
  /* [18][0][][] */ -26,7,7,27,5,-25,-25,52,-17,-44,1,-53,-26,-127,122,-33, 
  /* [19][0][][] */ 66,-31,28,35,-64,60,-42,68,125,36,-57,115,1,127,115,38, 
  /* [20][0][][] */ 6,3,127,6,7,28,5,47,-26,-51,51,45,40,-4,-110,78, 
  /* [21][0][][] */ -73,-28,9,-30,6,90,-122,-48,-13,-7,54,7,-127,53,12,17, 
  /* [22][0][][] */ -31,7,28,-12,36,-21,19,9,-127,-16,-5,-72,-14,19,90,22, 
  /* [23][0][][] */ 71,6,30,3,-20,-3,8,-35,-5,13,12,3,127,21,-2,-43, 
  /* [24][0][][] */ -111,-35,-29,-32,-50,76,127,36,-18,17,-31,-63,75,-70,-8,27, 
  /* [25][0][][] */ -112,-36,-1,39,112,-20,-52,-7,101,22,-41,127,9,-26,38,-44, 
  /* [26][0][][] */ -60,-24,-1,-90,127,23,7,6,35,-4,0,22,52,7,33,5, 
  /* [27][0][][] */ 69,-47,52,-66,-27,-36,7,-6,-53,27,-127,61,38,-21,-49,82, 
  /* [28][0][][] */ -53,71,-86,-79,50,-20,87,10,-6,3,-82,6,20,-23,-104,127, 
  /* [29][0][][] */ -46,-26,25,127,-4,27,21,-10,-8,39,-60,38,55,-60,24,33, 
  /* [30][0][][] */ 81,-46,110,-51,21,-3,9,25,-127,-63,54,-9,32,2,-78,98, 
  /* [31][0][][] */ -36,-42,-5,-53,25,-12,7,-36,-28,25,127,-18,-65,46,54,78, 
  /* [32][0][][] */ -19,57,-16,23,-127,7,-92,-83,-91,-51,12,60,-17,39,27,59, 
  /* [33][0][][] */ -22,8,50,98,-7,-4,35,-33,-57,2,55,-66,-10,15,-20,127, 
  /* [34][0][][] */ -86,41,25,-8,113,127,-65,63,55,79,-25,58,-23,-48,-31,-49, 
  /* [35][0][][] */ 57,-23,-30,-6,-127,-90,6,-116,-65,-38,-6,-14,21,49,-86,-11, 
  /* [36][0][][] */ 12,-10,-127,8,43,8,-10,-13,-52,-19,3,-30,22,-20,42,50, 
  /* [37][0][][] */ -1,33,127,10,-52,17,26,31,-33,19,-36,32,30,46,-54,-10, 
  /* [38][0][][] */ -44,-27,13,16,-23,126,-60,73,41,-127,102,45,6,27,53,-15, 
  /* [39][0][][] */ -33,4,34,43,71,15,-127,56,20,30,3,-64,9,-7,4,9, 
  /* [40][0][][] */ 9,-2,37,33,7,-10,10,-24,-96,-25,-57,18,-25,24,-127,61, 
  /* [41][0][][] */ 87,40,38,52,-61,-58,115,69,-103,48,-89,-127,35,57,-1,6, 
  /* [42][0][][] */ -24,-1,-40,21,49,74,12,127,92,-28,-15,44,82,-70,-38,-72, 
  /* [43][0][][] */ 11,-9,-73,-21,-3,-88,-20,-88,-53,49,23,-94,-125,-124,127,-30, 
  /* [44][0][][] */ -14,7,3,18,-20,48,11,-7,127,-6,-5,87,31,59,7,23, 
  /* [45][0][][] */ 2,-46,52,-84,20,6,-56,21,-38,-114,20,-127,-57,35,11,123, 
  /* [46][0][][] */ 21,57,80,114,-89,-8,31,-46,-127,34,-66,4,79,35,-62,-64, 
  /* [47][0][][] */ -95,-69,-99,105,17,127,10,22,69,36,120,63,-6,7,67,-77, 
  /* [48][0][][] */ 16,9,-6,-127,53,23,-19,19,-54,39,32,12,24,3,80,14, 
  /* [49][0][][] */ -49,11,12,-2,3,13,-101,127,86,-45,-28,77,57,19,-109,-124, 
  /* [50][0][][] */ -5,24,3,-15,23,-9,-37,43,127,19,-33,26,4,2,9,-32, 
  /* [51][0][][] */ 19,-22,97,18,68,-58,-127,-95,53,-99,56,34,17,2,-9,-5, 
  /* [52][0][][] */ 28,5,-7,47,47,-14,-40,76,-49,127,-64,-30,78,58,-30,-80, 
  /* [53][0][][] */ -32,91,18,-46,28,35,40,71,-45,19,-15,21,45,-127,-38,-29, 
  /* [54][0][][] */ 31,-23,40,19,30,-47,-3,-93,11,30,-41,19,-19,127,-44,-44, 
  /* [55][0][][] */ -52,126,127,22,40,-40,-19,-47,-114,-41,91,-120,-6,24,104,40, 
  /* [56][0][][] */ 63,-53,6,-11,104,-26,-21,13,-7,-2,84,127,-68,-24,94,20, 
  /* [57][0][][] */ -89,-89,1,121,-56,-59,127,94,-14,70,-4,35,21,84,69,-110, 
  /* [58][0][][] */ 17,127,-2,-34,-1,103,22,39,102,14,-40,27,63,-41,0,20, 
  /* [59][0][][] */ -28,94,-70,-113,-127,10,85,1,104,81,63,-20,21,-89,-71,-85, 
  /* [60][0][][] */ -15,-31,73,-30,64,127,48,-69,-50,18,29,-102,108,-33,38,35, 
  /* [61][0][][] */ -34,-15,-40,-46,-45,-1,127,77,27,24,-39,46,66,34,50,-8, 
  /* [62][0][][] */ 7,-64,42,-92,-59,-37,8,25,-34,-126,-17,-70,100,-72,127,40, 
  /* [63][0][][] */ -46,-56,-56,-63,127,21,-80,-77,22,90,56,14,48,-39,118,-55, 
  /* [64][0][][] */ -58,-36,64,56,127,-24,-15,-83,9,-112,0,-58,13,8,42,38, 
  /* [65][0][][] */ -103,52,19,-76,7,127,120,-90,-112,45,105,-69,17,17,-17,-18, 
  /* [66][0][][] */ 109,-22,107,20,-69,-45,-45,-57,-82,-74,22,-49,-25,76,-127,110, 
  /* [67][0][][] */ 98,9,-86,93,116,-15,-52,-114,121,29,-127,21,-40,-35,-102,-81, 
  /* [68][0][][] */ 52,88,-123,-28,-21,-82,31,61,3,23,62,-19,-36,13,127,-34, 
  /* [69][0][][] */ -47,21,19,74,27,-7,-35,127,78,11,-40,-14,53,72,-36,16, 
  /* [70][0][][] */ -121,6,-73,-66,-103,13,127,92,-20,38,-3,63,15,61,32,-35, 
  /* [71][0][][] */ -15,20,-18,3,38,39,-20,77,40,12,-55,18,-9,-127,57,-32, 
  /* [72][0][][] */ 4,7,-27,14,-19,-16,1,-127,24,37,-46,59,3,1,39,11, 
  /* [73][0][][] */ -68,-84,-36,-127,-19,-4,51,-48,-15,28,-59,-23,8,-73,64,-14, 
  /* [74][0][][] */ 33,47,35,41,5,-18,0,85,11,2,26,-127,-38,-19,46,27, 
  /* [75][0][][] */ -51,32,-79,-57,27,101,10,127,19,31,59,-23,-127,37,23,-13, 
  /* [76][0][][] */ 19,10,-1,-43,37,-127,-78,-108,-117,6,-36,-30,-19,31,-11,-29, 
  /* [77][0][][] */ -20,8,-1,-17,-64,-12,4,-71,108,-8,-99,21,9,52,-16,-127, 
  /* [78][0][][] */ -61,-96,71,42,99,40,-12,6,-31,-127,-100,24,94,-15,-50,50, 
  /* [79][0][][] */ 42,42,23,-37,99,2,127,36,126,95,-79,99,44,-15,-25,-64, 
  /* [80][0][][] */ -3,-32,29,-127,9,38,-2,35,-60,-53,13,-86,-34,59,-8,18, 
  /* [81][0][][] */ 76,4,42,-29,-54,-6,-36,-4,-18,-40,-19,19,-1,1,-127,32, 
  /* [82][0][][] */ -7,5,53,-62,0,-1,-46,-6,-103,-13,-5,-127,-102,-32,-65,51, 
  /* [83][0][][] */ -41,-1,-12,-127,-83,7,14,25,-117,-42,75,-102,36,-102,-17,41, 
  /* [84][0][][] */ 88,33,21,22,-34,-7,-42,10,6,-51,127,-3,-87,44,22,-49, 
  /* [85][0][][] */ 3,-23,51,32,21,-17,-60,127,16,-15,-46,-6,8,79,32,-75, 
  /* [86][0][][] */ 53,38,60,15,67,62,-95,23,-54,-71,127,-119,-33,-23,-38,19, 
  /* [87][0][][] */ 83,-105,33,23,-40,-127,-22,-61,1,-23,-50,31,68,14,-22,21, 
  /* [88][0][][] */ 36,21,2,-25,-14,-127,-89,-89,36,-41,-6,-6,-57,-3,11,-60, 
  /* [89][0][][] */ 101,41,-71,32,-44,-90,23,-81,84,53,16,-83,-96,101,11,-127, 
  /* [90][0][][] */ -24,33,80,29,-80,62,86,23,127,-57,27,-40,85,122,-48,15, 
  /* [91][0][][] */ -53,52,-45,-108,-36,42,94,11,-19,86,33,77,90,-127,3,23, 
  /* [92][0][][] */ 13,44,34,70,78,-26,-102,-127,100,-79,26,23,-98,94,64,-117, 
  /* [93][0][][] */ 44,-21,8,-127,12,-7,19,56,-18,-125,76,-107,19,43,-41,109, 
  /* [94][0][][] */ -9,51,-12,98,-21,-73,-56,127,-13,-76,-1,-17,9,64,-26,39, 
  /* [95][0][][] */ -26,127,32,-45,-13,34,-7,-69,-69,-66,-46,-114,-60,95,-65,0, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00091384106781333685, 0.00049710582243278623, 0.00025618000654503703, 0.00029593537328764796, 0.00030315594631247222, 0.0010281992144882679, 0.00084033020539209247, 0.0006247701239772141, 0.00021966971689835191, 0.00074780394788831472, 0.00058563961647450924, 0.00057445734273642302, 0.00040562939830124378, 0.00069791520945727825, 0.00022000008902978152, 0.00066826189868152142, 0.00062951282598078251, 0.0006492877728305757, 0.00043012748938053846, 0.00058442458976060152, 0.00085935613606125116, 0.0011229166993871331, 0.00043621435179375112, 0.0011620967416092753, 0.0014451891183853149, 0.00068590720184147358, 0.00066184438765048981, 0.00040089015965349972, 0.00081165699521079659, 0.00024736626073718071, 0.00011677561997203156, 0.00034224736737087369, 0.00065363850444555283, 0.0010798455914482474, 0.00048197500291280448, 0.00053559517255052924, 0.0005221778410486877, 0.00062798411818221211, 0.00032411856227554381, 0.0014854783657938242, 0.00062160240486264229, 0.00052743474952876568, 0.00023936507932376117, 0.00038325681816786528, 0.00033759794314391911, 0.0005406678537838161, 0.00053916312754154205, 0.00035713636316359043, 0.00022168162104208022, 0.00045275490265339613, 0.00056281295837834477, 0.00053211895283311605, 0.00084512378089129925, 0.00087873177835717797, 0.00089233584003522992, 0.00051231525139883161, 0.00030052903457544744, 0.00012477685231715441, 0.0011189492652192712, 0.00041486255940981209, 0.00048991618677973747, 0.00035645719617605209, 0.00054928148165345192, 0.00034626878914423287, 0.00067851709900423884, 0.0002863763365894556, 0.00046543159987777472, 0.00062221213011071086, 0.00060634553665295243, 0.00052200810750946403, 0.00038861657958477736, 0.00043546836241148412, 0.00045163912000134587, 0.00036480528069660068, 0.0015551310498267412, 0.000714941939804703, 0.00083740940317511559, 0.00071575399488210678, 0.00084639829583466053, 0.00052764138672500849, 0.00031607612618245184, 0.0004577329964376986, 0.00051245134091004729, 0.00019031134434044361, 0.0012603832874447107, 0.00072711164830252528, 0.00060283677885308862, 0.00015442153380718082, 0.00046689464943483472, 0.00054920004913583398, 0.00038552226033061743, 0.00076184887439012527, 0.00044747345964424312, 0.00046016264241188765, 0.00051186379278078675, 0.00037861132295802236, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -860, 7773, 16006, 2514, 33177, -1244, -21248, -12272, 3868, -23986, 36858, 8294, -35645, 27423, 36696, 14901, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00029845017706975341, 0.00024940908770076931, 0.00023808644618839025, 0.0001771831011865288, 0.00020171821233816445, 0.0002880645333789289, 0.0001703574089333415, 0.0003700876550283283, 0.00025620675296522677, 0.00022942450596019626, 0.00026323454221710563, 0.00039149628719314933, 0.00025806465419009328, 0.0002983399317599833, 0.00037690027966164052, 0.00029818600160069764, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 29,25,24,48,41,55,-22,-7,52,10,17,19,-8,15,-9,62,-20,9,28,-4,103,-24,10,-26,-5,-50,11,-73,-15,52,58,47,127,21,46,-44,18,47,-96,20,-44,14,-10,-28,-4,-14,-23,9,-19,13,-10,-11,-6,-10,1,37,16,48,-20,-12,-46,17,-53,-6,-13,-9,17,33,44,-71,14,0,-94,-30,31,-10,0,-63,5,22,122,-14,-25,-109,-2,-54,-11,20,35,55,9,9,34,4,-25,123, 
  /* [1][0][][] */ 53,-51,11,29,22,-42,-40,-38,-11,-8,51,20,4,-17,-31,-41,-27,-12,69,16,-14,-57,-37,-23,114,-30,-4,66,-8,-5,-33,13,-5,13,-24,68,-61,-80,71,-59,-55,-45,83,-33,-44,21,-43,-20,39,43,-24,-113,21,-43,47,-21,36,38,-107,-53,21,-29,-30,-7,-37,-49,36,31,29,-11,-24,11,-127,40,-31,-2,37,91,59,-29,-2,-28,-3,21,-40,85,15,12,20,-19,15,20,48,-29,8,-19, 
  /* [2][0][][] */ 15,13,-55,-28,35,10,-25,-37,73,9,38,62,12,2,16,7,-2,17,61,19,14,-33,20,-25,-19,-48,-18,20,-38,63,127,-48,31,-33,-51,5,28,114,-106,-14,-28,-12,8,-3,0,-46,-35,-15,6,-17,15,-19,13,-25,-15,87,-57,5,8,28,6,43,27,78,-23,-114,13,-65,16,-51,-34,21,-35,44,22,-4,12,48,9,65,11,75,16,-18,-17,-59,-53,60,6,61,-3,-33,-60,-1,-14,53, 
  /* [3][0][][] */ -6,-18,-50,57,40,6,21,-22,-18,48,82,-51,5,-3,37,-21,42,-27,6,35,-26,-5,25,-37,27,14,-22,-17,17,5,46,1,19,51,-62,16,-35,77,-80,53,2,-6,37,-44,-14,-3,29,30,-127,27,13,28,-65,-18,-19,13,43,46,-14,14,-29,33,-23,74,-64,-51,41,52,24,51,-40,20,-48,-46,35,-25,-47,-58,76,4,70,-16,11,89,104,-46,-24,40,8,-1,-5,-32,-11,-28,26,33, 
  /* [4][0][][] */ -37,-4,-31,-78,-62,-93,-67,-70,-10,-17,-7,11,-72,63,39,30,43,-37,30,44,-51,59,7,69,-63,17,-101,27,-31,17,9,0,-94,-110,-54,37,17,-31,26,12,86,26,-61,3,95,-4,44,21,4,57,19,13,-51,-10,52,-52,-29,-80,68,-13,0,12,55,-72,55,-79,47,-54,22,-15,-50,-24,-13,105,-39,8,-46,80,30,-5,-33,8,87,-18,54,-41,0,95,57,54,-59,-25,-127,1,-14,-27, 
  /* [5][0][][] */ -12,9,-22,-34,2,-31,-9,63,14,6,-45,17,-25,3,57,16,-29,-12,-31,5,-55,-15,-52,1,-20,17,-3,45,42,-8,27,31,-25,-9,-30,17,-49,-76,24,-4,-7,-54,-9,26,36,35,12,32,35,46,-19,0,0,21,-4,-32,34,-63,-17,-11,-1,-4,20,-15,45,14,-1,9,-3,29,-10,6,61,88,-44,-55,7,22,0,48,0,-33,6,55,-13,11,31,-29,-16,-60,18,-98,-16,2,9,-127, 
  /* [6][0][][] */ -26,-12,-18,-41,-16,53,38,22,-8,1,-9,-8,46,-46,-27,2,-42,-39,-7,-9,9,-8,-48,42,127,31,48,-24,22,-15,-55,-30,-54,66,-73,29,12,4,63,6,5,-70,-25,-21,-38,-21,4,-92,28,38,33,17,26,65,-38,-56,80,-16,-3,-2,66,21,12,53,20,108,4,-23,-26,63,25,16,39,-40,32,-27,20,17,41,47,-45,-12,51,-25,-34,96,22,-58,-72,-54,-9,-32,-21,26,5,-23, 
  /* [7][0][][] */ 40,-11,9,-32,23,9,-19,-25,-22,-11,-13,8,-6,-77,13,12,-29,-30,-34,-18,28,-18,-106,9,13,25,35,-44,6,-21,-18,-23,2,28,-34,26,-19,-30,6,-25,3,-46,-9,16,-37,37,-44,41,3,42,-44,-28,-13,14,-20,-26,59,-12,-10,1,35,3,15,23,27,28,6,-22,0,25,19,19,31,1,-14,-38,41,8,-12,-71,-9,-29,31,16,-45,127,18,-23,-93,-77,19,62,7,33,17,-19, 
  /* [8][0][][] */ -50,-11,2,11,6,-10,12,44,-7,10,-91,-11,-15,12,44,-23,-35,-10,-13,-8,-31,23,-66,14,-66,1,-3,7,29,-53,-3,9,39,-19,45,7,-28,-41,6,49,17,5,-1,-75,-46,23,13,8,5,23,-41,33,-45,61,12,-127,26,-45,-22,-30,-36,-34,13,-11,31,50,8,-6,-3,-5,19,35,18,3,-10,13,-25,-51,-18,-82,59,12,7,-22,-37,-12,38,-65,0,-1,-10,22,35,12,18,-2, 
  /* [9][0][][] */ -5,-51,6,-1,-32,39,25,33,1,-16,-1,-33,-26,-4,-14,2,-6,-20,-15,-44,-25,16,-53,-31,63,42,59,-28,11,-64,-53,17,-30,28,77,41,-14,39,21,35,28,-5,7,-37,-46,-3,11,-52,7,13,-19,37,-8,41,-23,-74,8,-1,-20,6,26,-12,16,55,28,127,2,44,-9,20,42,-27,13,-54,-50,30,36,-4,18,-13,32,-20,9,-51,40,69,38,-25,-11,-10,-6,0,26,13,30,-33, 
  /* [10][0][][] */ 56,41,-16,-14,80,-127,-60,-19,5,33,60,-12,-17,1,11,-44,35,42,7,15,-47,-30,-88,14,-67,-23,-57,87,-5,-26,14,34,47,-42,0,-11,65,-59,29,-23,-25,56,85,-16,-81,4,-33,-11,-20,-13,-63,-3,-21,-37,25,50,-27,44,-86,8,5,2,-22,1,0,14,31,-4,68,-35,36,44,-100,27,-18,-57,-8,35,2,-15,18,15,-24,-30,50,-15,95,-31,20,-23,29,66,79,51,43,-77, 
  /* [11][0][][] */ 19,10,35,16,-54,-1,50,57,-16,-56,-102,-77,-16,27,51,-14,-29,-39,-103,-46,-11,35,-11,25,-58,22,-64,-33,0,34,0,1,10,-54,22,12,-3,11,-12,127,31,27,44,-95,4,-14,43,24,-84,-8,-29,-4,75,40,-40,-64,-18,-11,34,1,-29,-33,-30,-46,-13,80,-11,12,42,-22,10,-3,-29,-111,-36,44,-59,-78,-62,-41,58,5,90,10,-8,-25,16,-36,7,11,-15,-17,16,-2,40,31, 
  /* [12][0][][] */ -48,-12,26,-12,-66,86,47,7,90,-29,-55,36,-7,-18,-42,-53,-27,12,-5,34,34,37,-7,-7,-4,17,10,-56,-81,7,20,-68,-34,-33,28,3,28,19,36,73,-21,-34,-9,-18,-22,38,36,2,45,-17,-58,42,26,37,-18,-98,58,-63,54,-8,-1,-6,49,-1,46,45,-32,1,-45,20,-26,-43,127,-20,-60,-4,19,-14,-24,-71,26,2,-5,24,-6,22,-37,-24,-31,-31,-1,15,-61,-14,2,11, 
  /* [13][0][][] */ 19,-22,-47,26,29,26,-2,-5,7,10,20,21,41,-7,-1,-6,18,-54,-8,23,-3,-58,95,-18,1,-10,19,6,-26,24,7,-4,18,31,-19,11,19,3,-10,28,-50,20,17,13,35,3,-13,-127,16,-16,56,-3,-17,-2,3,22,-18,83,-38,15,9,16,3,-5,-31,-29,-27,-55,-1,-9,18,-39,-63,25,1,16,-19,-11,54,12,-4,-2,-33,16,30,-1,-9,30,-19,11,14,-27,3,27,-27,4, 
  /* [14][0][][] */ -90,-17,-45,-2,22,-62,-46,33,-6,3,32,-1,76,27,-66,28,127,-15,-17,40,-43,2,9,89,-90,-14,-11,-1,-49,-122,-82,-13,10,-27,31,-52,7,-40,59,-53,80,53,53,-4,22,77,37,20,-114,56,-14,52,-108,-28,72,16,0,-8,56,45,54,59,42,35,-1,26,-37,7,13,86,-2,-50,-70,26,24,59,-16,73,102,-22,-4,12,-20,-14,73,52,58,3,39,8,50,0,-7,12,14,-8, 
  /* [15][0][][] */ 58,5,0,-37,-23,75,36,-39,-6,24,36,39,-58,-24,-2,37,27,44,32,-11,27,23,-105,44,15,-5,39,-28,27,48,-36,-61,-85,27,-25,-4,17,-17,-103,-127,1,-48,-40,42,2,24,-53,-44,37,-28,-27,-3,29,-67,28,29,-15,-16,72,9,-20,47,45,18,41,-52,-27,11,-32,21,-40,22,24,43,-2,-38,26,-17,12,21,-47,21,29,58,-88,-47,-21,-29,-72,35,30,-3,-21,38,-17,-30, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.012684131972491741, 0.010599886067211628, 0.010118673555552959, 0.0075302817858755589, 0.0085730236023664474, 0.012242741882801056, 0.0072401897050440311, 0.015728725120425224, 0.010888786986470222, 0.0097505412995815277, 0.011187467724084854, 0.016638591885566711, 0.010967747308313847, 0.012679446488618851, 0.016018262133002281, 0.012672904878854752, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 14952, -12300, 2855, 73008, -1745, -4327, -3971, 8193, -6327, 300, 2625, 81, 9049, -9931, 3873, -7375, -1406, 16556, 22370, 3953, 3481, -6238, -891, 1229, 12172, 1747, -1439, -2040, -6885, -13877, 5386, -9770, 521, -3133, -4888, 25913, 1348, -5010, 15151, 824, -711, -1315, -6288, -7326, -6981, 59248, -3042, 20767, 26333, -16269, 1725, 8197, 960, -2346, -2944, 677, -18553, 609, -1701, -6635, -4202, 792, -9355, -4510, 2384, 15110, 30329, 27340, -11067, 876, -8670, 1923, 13392, 11714, -684, 513, 25667, 34600, 1443, -7723, -1434, -19099, -939, -2452, -1082, -590, 5030, 45, 42, -1089, -4, 499, 1450, 1935, 1929, 44316, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00016586948186159134, 9.7598334832582623e-05, 0.00021050358191132545, 2.9236460250103846e-05, 0.00016736584075260907, 0.00016779333236627281, 0.00030264360248111188, 7.3435883678030223e-05, 9.1573478130158037e-05, 0.00033437277306802571, 0.00025214190827682614, 0.00026271416572853923, 7.0656664320267737e-05, 0.00033082161098718643, 0.00020424772810656577, 0.00011632221139734611, 9.3537470092996955e-05, 0.00026025151601061225, 7.0724789111409336e-05, 0.00013240483531262726, 3.3527499908814207e-05, 0.00015585334040224552, 0.0001544606639072299, 0.00036900298437103629, 0.00029581069247797132, 0.00022481735504698008, 0.00010532690794207156, 0.00023041492386255413, 8.7893939053174108e-05, 6.4794068748597056e-05, 0.00013871399278286844, 0.0001594439527252689, 0.00011918359086848795, 9.5276336651295424e-05, 0.00016498366312589496, 8.4328166849445552e-05, 0.00036963119055144489, 0.00010166449646931142, 7.2603346779942513e-05, 0.0002639905724208802, 0.00022958613408263773, 0.00020759811741299927, 0.00037179174250923097, 0.0001635684457141906, 0.00019376818090677261, 3.85971216019243e-05, 0.00018925569020211697, 0.000170610670465976, 9.046865307027474e-05, 0.00012241561489645392, 0.0002122220175806433, 0.0001374105631839484, 0.00023260594753082842, 0.00040627460111863911, 0.00018584217468742281, 0.00059956166660413146, 0.00018255620670970529, 0.00028760870918631554, 0.00012478447752073407, 6.8064997321926057e-05, 0.00027202226920053363, 0.00014470632595475763, 0.00024702481459826231, 0.00012480453005991876, 0.00011522397835506126, 0.00022358447313308716, 4.8383375542471185e-05, 6.3927873270586133e-05, 0.00033608335070312023, 0.00023867961135692894, 0.00019708278705365956, 4.6390137868002057e-05, 0.00044236527173779905, 0.00016284745652228594, 0.00012020952999591827, 0.0001932713930727914, 0.00067439989652484655, 5.4629865189781412e-05, 0.0001857820461736992, 0.0002619775477796793, 0.00016719878476578742, 0.00011688052472891286, 0.00013941724319010973, 0.00013223764835856855, 0.00013033457798883319, 0.0001080491128959693, 9.9048338597640395e-05, 0.00019012723350897431, 0.00015826860908418894, 0.00010009780817199498, 0.00017059614765457809, 0.00011003157851519063, 0.00011304023064440116, 0.00039117931737564504, 0.00066897866781800985, 8.8021610281430185e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -24,5,-22,104,-6,28,-75,-56,19,-3,93,-27,-15,-12,9,56,15,13,-52,6,98,-1,41,-36,3,13,43,48,29,16,23,51,-16,28,11,-12,3,56,-47,-30,18,13,32,14,-96,-48,25,-7,-3,-8,-7,-2,50,6,-19,4,-12,-47,29,-28,34,-16,127,35,-15,-12,23,-47,73,36,-7,-13,70,-51,86,-2,10,-127,30,79,9,25,127,-13,39,30,-46,-15,39,-15,-17,77,3,22,-6,7, -55,9,-13,10,61,-5,-17,-127,36,16,-127,-23,-17,-7,11,86,11,-33,-26,-20,94,-92,127,29,-62,-30,-127,-20,29,45,-51,18,112,5,-21,3,-25,127,-24,-127,10,-21,-36,3,42,-124,127,-47,-71,58,52,7,42,-63,25,71,32,52,-85,89,127,26,-4,-11,42,-43,-117,-2,36,-31,-18,41,-32,-49,127,-14,-17,-60,-23,74,-51,76,-18,6,-15,48,59,-35,-27,42,-14,73,-127,-29,20,-127, -1,-11,-27,-70,25,27,41,18,-3,-2,-3,69,-16,-8,-4,0,-23,17,-58,11,16,31,30,-29,2,-30,2,9,1,23,44,-89,48,27,20,-13,10,15,1,-26,-1,1,-25,1,26,-27,26,-2,11,1,8,-15,22,6,-20,7,-11,49,-3,-2,21,-30,-4,-15,-29,-20,30,-45,-121,-13,44,-20,-91,-44,-15,13,13,-30,-4,24,-25,54,-37,-15,-39,26,15,48,-18,-29,25,-13,5,10,-6,-51, 
  /* [0][1][][] */ -43,61,-19,34,-83,-11,-19,-47,30,97,-39,-37,-39,-31,-4,61,127,-31,-76,-7,69,-127,-27,11,-34,-52,-123,-10,37,74,-49,24,-119,-75,-50,6,64,-5,-24,52,-12,97,0,-9,27,-52,-13,-34,127,45,-15,19,46,14,-46,-20,21,14,-111,127,-34,-99,10,127,-59,-34,-116,127,-44,127,-21,61,-45,-42,32,5,-46,-57,127,71,127,41,15,-1,127,31,-122,33,-33,-36,-112,38,102,97,21,-57, 127,127,127,127,-41,-127,127,18,127,-127,28,-127,-113,127,127,127,-24,-127,-41,-127,127,32,-71,127,127,127,-65,-127,127,127,-127,127,-3,-127,-121,127,-127,-48,88,101,-127,-127,127,127,127,-127,-92,127,-14,127,-127,-127,-127,127,127,-127,127,-127,-30,41,-102,-33,-80,-62,127,127,-77,124,127,-103,-127,127,-34,127,-127,-127,-127,119,-80,127,-24,127,80,127,-37,-127,-21,-115,-127,-120,-24,-127,-16,-127,-127,118, -26,66,-39,9,127,81,-23,42,5,20,-6,-16,-42,-28,-9,-7,-107,-24,-127,32,35,83,-11,-123,-32,-47,117,54,12,66,68,6,119,-51,127,0,54,15,-90,19,33,23,-33,-2,-22,-58,-12,-44,80,16,-17,44,7,4,-93,-14,31,17,127,-91,9,127,-14,-36,-110,-28,-77,97,14,-21,121,22,10,-55,8,46,-32,-11,-64,9,-50,17,40,21,-86,35,127,-53,33,-27,127,-13,-125,29,30,19, 
  /* [0][2][][] */ -8,-38,-23,-56,-8,32,36,17,5,14,-25,45,22,-41,-9,9,62,0,26,24,8,32,-20,-15,2,-28,22,9,-16,25,55,-76,-44,70,-26,-21,35,-40,-76,17,18,18,-39,14,11,-74,-13,-3,-3,13,8,-6,12,5,-26,4,5,62,-42,22,-5,-20,-12,16,-15,-11,19,-44,-58,14,-21,-4,-127,-23,-8,25,4,-9,61,26,24,20,-36,17,19,24,-44,-2,7,32,26,3,30,34,-5,-26, -34,-6,-24,31,-42,87,-42,51,10,-15,54,-9,127,-2,-18,-16,2,-36,-39,26,-10,86,-55,-118,-57,-56,111,68,6,71,62,-3,-127,67,-9,-20,-25,-26,-127,-2,52,-9,-12,43,-22,-39,-12,-51,-55,22,53,27,-10,-79,31,60,31,39,75,-69,25,-63,-14,3,9,-33,-127,-53,-11,-28,-63,34,35,-50,-22,-6,-60,15,-57,-4,33,47,10,14,10,66,-117,127,14,127,-27,-7,118,-25,43,82, -15,-37,-26,34,4,65,-56,6,8,-14,0,3,9,-48,-16,-13,-53,-5,12,21,-27,5,-22,-9,-6,12,4,45,-9,20,39,32,11,48,34,-26,-5,-23,-47,15,22,-11,13,6,-76,-34,-13,4,1,-15,-4,8,3,19,-27,2,16,-49,48,-41,-13,62,3,-29,-17,-6,51,-55,54,-1,56,-20,49,-49,-16,32,3,13,-20,28,-36,40,62,-17,-12,55,41,-6,120,11,3,-19,5,-33,-11,-42, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0070494529791176319, 0.0041479291394352913, 0.0089464019984006882, 0.0012425495078787208, 0.0071130478754639626, 0.0071312165819108486, 0.012862352654337883, 0.0031210249289870262, 0.0038918727077543736, 0.014210842549800873, 0.010716031305491924, 0.01116535160690546, 0.0030029083136469126, 0.014059918001294136, 0.0086805280297994614, 0.0049436939880251884, 0.0039753424935042858, 0.011060688644647598, 0.0030058033298701048, 0.0056272055953741074, 0.0014249186497181654, 0.0066237668506801128, 0.006564578041434288, 0.015682626515626907, 0.012571954168379307, 0.0095547372475266457, 0.0044763935729861259, 0.0097926342859864235, 0.0037354922387748957, 0.0027537478599697351, 0.005895344540476799, 0.0067763677798211575, 0.0050653023645281792, 0.004049244336783886, 0.0070118056610226631, 0.0035839469637721777, 0.015709325671195984, 0.0043207411654293537, 0.003085642121732235, 0.011219599284231663, 0.0097574107348918915, 0.0088229198008775711, 0.015801148489117622, 0.006951658520847559, 0.0082351472228765488, 0.001640377682633698, 0.0080433664843440056, 0.0072509534657001495, 0.0038449177518486977, 0.0052026635967195034, 0.0090194353833794594, 0.005839949008077383, 0.0098857525736093521, 0.017266670241951942, 0.0078982925042510033, 0.025481369346380234, 0.0077586383558809757, 0.012223370373249054, 0.0053033400326967239, 0.0028927621897310019, 0.011560945771634579, 0.0061500184237957001, 0.010498554445803165, 0.0053041921928524971, 0.0048970188945531845, 0.0095023401081562042, 0.0020562934223562479, 0.0027169345412403345, 0.014283542521297932, 0.010143883526325226, 0.0083760181441903114, 0.0019715807866305113, 0.0188005231320858, 0.0069210166111588478, 0.0051089050248265266, 0.0082140341401100159, 0.028661996126174927, 0.0023217692505568266, 0.0078957369551062584, 0.011134045198559761, 0.0071059484034776688, 0.0049674222245812416, 0.0059252330102026463, 0.0056201000697910786, 0.0055392193607985973, 0.0045920871198177338, 0.0042095542885363102, 0.0080804070457816124, 0.006726415827870369, 0.0042541567236185074, 0.0072503359988331795, 0.0046763420104980469, 0.0048042098060250282, 0.016625121235847473, 0.028431592509150505, 0.0037409183569252491, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 19827, 3273, 16439, -852, 11224, 5433, 27767, 18014, -1735, 28203, 14312, 3927, 20903, 50568, -1563, -6041, 11008, 20955, 1320, 229, -712, 33374, 5489, 9912, 14267, 10226, 9253, 9557, 552, -363, 21726, 16389, 12209, 4346, 7280, -1262, 28224, 13853, 3082, 12432, 1608, 15808, 18083, 4445, 9190, 17226, 29147, 20360, 8344, 6099, 696, -1670, 16482, 20446, 34296, 11056, -160, 18246, 2501, 6728, 24683, 14090, 3254, 17120, 9698, 5859, 5414, -2449, 32893, 9691, 14587, -3556, -5110, 6273, 1446, 4296, 91210, 20513, 29109, -6799, 4955, -4180, -2997, 1197, 14281, 6706, 12519, 6294, 10790, 5809, 15373, 5303, 20494, 28304, -11277, 21953, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00014287442900240421, 0.00014334176375996321, 8.5845866124145687e-05, 0.00051634252304211259, 0.00013577680510934442, 0.00016728205082472414, 0.00011747163080144674, 0.00020141954883001745, 0.00019707009778358042, 6.6609405621420592e-05, 0.00010420341277495027, 0.00020063223200850189, 0.00012763212725985795, 9.4971423095557839e-05, 0.00022673056810162961, 0.00011911518959095702, 0.00021536329586524516, 0.00011082532000727952, 0.0001921383518492803, 0.00033534236717969179, 0.00030273891752585769, 7.5153257057536393e-05, 0.00023033206525724381, 9.1988411440979689e-05, 0.00011986362369498238, 0.00020490227325353771, 0.00017007393762469292, 0.00010680696141207591, 0.00030320952646434307, 0.00039076292887330055, 7.3187016823794693e-05, 0.00011958526010857895, 0.00014083681162446737, 0.00022598932264372706, 0.00020147285249549896, 0.00027779588708654046, 8.2460552221164107e-05, 0.0001797824224922806, 0.00017433436005376279, 7.5618525443132967e-05, 0.00021184382785577327, 0.00011301967606414109, 0.00010945107351290062, 0.00015496366540901363, 0.00012296460045035928, 0.00017967050371225923, 9.7889009339269251e-05, 8.2731276052072644e-05, 0.00021033393568359315, 0.00016270474588964134, 0.00036383382393978536, 0.00040463954792357981, 0.00015242173685692251, 9.3413458671420813e-05, 7.6666910899803042e-05, 0.00014468218432739377, 0.00029161814018152654, 9.5930932729970664e-05, 0.00020859586948063225, 0.00026273712865076959, 6.7583307099994272e-05, 0.00011249414819758385, 0.00031177903292700648, 0.00017071764159481972, 0.0001144625639426522, 0.00020765385124832392, 0.0003432199009694159, 0.00020885956473648548, 8.4801686170976609e-05, 0.00011926089064218104, 0.0001395501458318904, 0.00013343185128178447, 0.00011352682486176491, 0.00018121080938726664, 0.00018931846716441214, 0.00028119250782765448, 2.9627428375533782e-05, 0.00019572746532503515, 6.2201768741942942e-05, 0.00020222591410856694, 0.00020066420256625861, 0.00045048882020637393, 0.0001303345343330875, 0.00034816030529327691, 0.00010925617243628949, 0.00021698360797017813, 0.00012758024968206882, 0.00021023108274675906, 0.000147342259879224, 0.00027735708863474429, 0.00010368194489274174, 0.00033501640427857637, 8.9247339928988367e-05, 9.968542872229591e-05, 0.00025238469243049622, 0.00015441935101989657, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ -4,-36,-9,37,58,3,42,12,127,57,-44,24,43,-10,37,-35, 
  /* [1][0][][] */ 0,80,31,32,57,-3,11,-13,40,94,-28,127,0,-3,55,-125, 
  /* [2][0][][] */ -13,-32,53,45,-36,82,-6,113,13,-8,-49,54,-15,0,127,-119, 
  /* [3][0][][] */ 68,104,22,2,-127,-47,-97,-10,-82,-88,61,-105,-111,118,-47,12, 
  /* [4][0][][] */ -18,12,-33,-46,-20,92,9,75,-57,-15,20,-74,-6,-127,68,-15, 
  /* [5][0][][] */ 107,-40,-23,-9,-27,-127,-10,29,-9,-55,-58,17,17,-15,9,66, 
  /* [6][0][][] */ -127,-28,51,62,-72,-27,-46,60,-92,-91,-46,-63,10,122,64,39, 
  /* [7][0][][] */ -60,-71,-23,89,-127,-114,-18,66,-92,-59,-56,-34,30,32,31,-24, 
  /* [8][0][][] */ -61,-26,-69,-43,2,44,12,-44,-8,22,-1,-6,-127,-35,0,39, 
  /* [9][0][][] */ 10,-127,121,116,25,-1,-11,-64,97,-75,-5,-94,-46,78,96,-2, 
  /* [10][0][][] */ -69,-46,-6,-84,114,127,19,81,110,-102,59,58,-42,-12,-57,109, 
  /* [11][0][][] */ -6,17,-69,26,66,69,14,127,45,-16,3,47,38,61,-44,18, 
  /* [12][0][][] */ -19,-127,70,114,-28,-75,-90,10,12,-92,-114,-16,20,103,-86,-8, 
  /* [13][0][][] */ 89,-65,-47,-69,9,-40,-8,-127,-44,30,42,-20,23,-26,82,77, 
  /* [14][0][][] */ -15,22,-38,-1,27,-127,31,-39,38,42,-16,-57,33,90,11,-4, 
  /* [15][0][][] */ -13,27,127,126,100,-12,-12,28,114,-36,-91,96,-122,-65,-54,-25, 
  /* [16][0][][] */ -47,48,6,23,-21,127,50,13,11,-9,9,5,51,34,1,24, 
  /* [17][0][][] */ -19,-88,-90,-57,-79,-25,71,28,-46,127,-9,-63,-33,35,120,-11, 
  /* [18][0][][] */ -3,124,11,21,6,6,32,-86,28,127,-38,54,26,-18,30,-69, 
  /* [19][0][][] */ -18,-59,-2,-13,34,71,-14,1,5,3,0,-2,-127,-1,19,42, 
  /* [20][0][][] */ 25,15,-4,-32,-77,27,59,-69,-81,29,-127,-40,41,26,1,45, 
  /* [21][0][][] */ 47,-25,127,76,-55,88,63,-7,21,50,-43,2,18,98,21,-66, 
  /* [22][0][][] */ 59,-1,54,-42,12,90,-23,107,-22,-56,8,72,-127,32,87,42, 
  /* [23][0][][] */ 54,34,-55,11,3,-127,15,-11,-83,20,-9,-33,-22,-34,6,63, 
  /* [24][0][][] */ 20,-59,-19,-73,74,13,-49,-13,59,-15,68,119,-32,77,127,44, 
  /* [25][0][][] */ -127,-47,18,-8,30,82,-55,29,-27,-56,-7,36,-4,60,-17,50, 
  /* [26][0][][] */ 78,10,-1,23,-95,-75,28,63,-41,6,-27,1,14,-127,-27,35, 
  /* [27][0][][] */ -41,40,-40,-27,2,58,8,-12,7,13,127,14,-64,-6,-5,3, 
  /* [28][0][][] */ 24,3,60,48,-2,-7,25,114,27,40,-39,14,-127,-9,-19,36, 
  /* [29][0][][] */ -21,-9,34,-9,20,7,5,-29,-127,-2,-14,29,13,15,-96,13, 
  /* [30][0][][] */ 17,59,-72,-43,38,-76,-73,-35,-95,-127,5,-29,-85,27,-34,49, 
  /* [31][0][][] */ 19,61,-42,-21,-3,32,-20,-4,-127,-73,-65,-37,30,8,-51,104, 
  /* [32][0][][] */ -37,11,21,48,33,127,22,45,38,68,46,36,-8,-31,37,-28, 
  /* [33][0][][] */ 45,16,127,39,-85,-22,57,18,-50,19,-80,-26,30,-19,-30,31, 
  /* [34][0][][] */ -21,15,-25,-76,127,39,-18,3,79,67,20,28,-28,-2,51,-85, 
  /* [35][0][][] */ 3,-125,48,34,48,-49,-19,-22,-81,35,3,30,-46,127,27,-102, 
  /* [36][0][][] */ -77,4,-64,-31,-17,1,42,32,-31,60,127,-42,24,-18,-3,2, 
  /* [37][0][][] */ 80,19,127,0,-30,-81,86,-56,17,80,-22,10,6,-67,-7,16, 
  /* [38][0][][] */ 7,-106,62,70,54,-85,-86,-23,-1,-35,26,12,95,127,-47,-35, 
  /* [39][0][][] */ -58,-18,-73,-118,-6,-21,-14,10,-127,-58,106,-117,-18,-6,73,44, 
  /* [40][0][][] */ -30,-58,23,3,62,63,3,20,127,22,7,103,103,19,3,-90, 
  /* [41][0][][] */ -25,-127,-66,-102,29,-16,-14,-33,50,14,77,-21,-26,17,61,5, 
  /* [42][0][][] */ -39,73,20,111,-98,10,-98,37,-33,-123,-26,-10,13,97,-44,127, 
  /* [43][0][][] */ 20,109,-31,127,55,-7,13,-20,14,68,-18,85,12,-29,42,42, 
  /* [44][0][][] */ 10,-2,-127,-41,-22,38,-11,44,-41,-37,65,-66,26,-24,-10,80, 
  /* [45][0][][] */ -37,22,-51,-127,-22,32,22,-3,-37,2,-9,-17,-3,-61,34,0, 
  /* [46][0][][] */ 14,63,127,53,12,65,90,76,1,-35,-24,70,21,86,-55,-20, 
  /* [47][0][][] */ 36,-35,17,-56,-85,-44,-4,55,-74,-40,28,-31,5,-127,62,37, 
  /* [48][0][][] */ 47,44,35,-127,23,-35,22,-8,-14,-36,21,-30,10,25,-47,58, 
  /* [49][0][][] */ 65,2,16,127,46,-23,18,37,-12,23,0,33,41,42,10,5, 
  /* [50][0][][] */ -65,23,40,-45,-1,127,-18,7,-18,-53,57,23,16,13,12,-2, 
  /* [51][0][][] */ -46,47,11,-19,57,69,-38,67,36,-15,18,127,25,43,-19,-55, 
  /* [52][0][][] */ -11,18,51,8,-2,-39,31,-26,-20,-20,-1,-15,29,69,-127,64, 
  /* [53][0][][] */ 11,2,4,-127,-57,39,-48,12,-64,-15,60,-92,-5,6,40,35, 
  /* [54][0][][] */ 88,-98,-32,-71,93,-37,-76,-43,31,-80,18,-37,-82,127,-17,71, 
  /* [55][0][][] */ -4,-58,-12,26,-23,-11,-21,-127,-83,-39,-17,-43,-17,-16,5,12, 
  /* [56][0][][] */ 22,-26,27,56,-5,-10,-17,127,11,-32,6,-26,88,17,-28,26, 
  /* [57][0][][] */ 101,-91,15,-57,-124,-127,0,62,21,33,-21,-88,50,24,62,15, 
  /* [58][0][][] */ -33,-44,11,71,-50,15,-12,43,52,46,30,8,17,-9,-10,-127, 
  /* [59][0][][] */ 41,68,-17,13,-5,73,21,15,6,50,-127,3,57,-17,3,-9, 
  /* [60][0][][] */ -48,77,-17,6,-11,67,90,55,11,127,44,-19,2,-50,54,-2, 
  /* [61][0][][] */ 34,-81,69,39,46,-34,-127,-43,63,-53,9,-7,-44,-1,-1,-84, 
  /* [62][0][][] */ -14,-41,-107,-9,-18,47,35,127,33,5,30,-21,45,-28,-36,-20, 
  /* [63][0][][] */ -66,81,23,-82,-127,2,103,-7,31,70,-16,-14,-23,-66,118,21, 
  /* [64][0][][] */ 67,4,-18,18,6,9,81,-66,-33,86,15,-12,13,-127,29,47, 
  /* [65][0][][] */ 1,2,55,-15,-2,36,-33,-75,-80,-127,-41,-87,2,18,36,11, 
  /* [66][0][][] */ -127,-5,-16,8,-58,20,13,-5,-51,-21,-56,8,22,26,34,50, 
  /* [67][0][][] */ 5,-17,-9,127,-22,-31,3,34,80,70,-54,-42,28,-12,-33,-19, 
  /* [68][0][][] */ -38,-11,-15,34,-14,24,51,-52,-127,-27,23,-13,-20,-47,-46,26, 
  /* [69][0][][] */ 16,103,-3,42,78,127,113,-43,7,26,22,36,-3,-63,35,20, 
  /* [70][0][][] */ 59,-15,-68,-102,19,-96,17,61,8,-41,10,-110,-6,121,68,127, 
  /* [71][0][][] */ 33,13,47,127,87,-98,-61,116,74,-52,-19,86,18,-19,-77,-1, 
  /* [72][0][][] */ -68,-21,-34,44,-18,-10,-40,53,26,14,-103,26,127,6,0,17, 
  /* [73][0][][] */ 125,-27,-67,124,-46,-127,43,21,81,103,-115,-42,103,17,6,-67, 
  /* [74][0][][] */ 127,10,1,-10,-13,27,66,-52,-31,23,-48,12,-68,-44,55,-39, 
  /* [75][0][][] */ -57,33,-19,127,-13,43,29,-43,-20,58,-18,-16,24,-26,-9,-24, 
  /* [76][0][][] */ -23,13,-10,35,10,13,10,-127,20,-110,2,69,1,-7,-34,16, 
  /* [77][0][][] */ 75,30,29,42,3,-50,-12,-33,52,35,-27,75,4,71,-127,55, 
  /* [78][0][][] */ 50,-107,30,-46,57,-3,-69,-45,32,-31,21,-49,-124,76,127,-32, 
  /* [79][0][][] */ -71,-59,99,-20,85,54,-127,-1,-45,-116,106,17,106,-27,-15,-3, 
  /* [80][0][][] */ -127,-74,-95,55,-56,-23,26,-32,-70,-56,-49,-32,19,-8,-19,67, 
  /* [81][0][][] */ 56,-10,-16,42,78,44,-17,-3,5,-57,-22,24,24,2,-127,24, 
  /* [82][0][][] */ 127,91,73,63,-21,-34,-55,-10,1,39,59,-4,12,61,-31,-51, 
  /* [83][0][][] */ 127,33,25,-14,7,-22,-23,0,-2,10,57,-49,-40,0,-19,-50, 
  /* [84][0][][] */ 42,-127,-109,-53,47,-28,1,-95,33,-59,74,-39,-51,-7,79,-40, 
  /* [85][0][][] */ -16,6,-38,-33,-10,94,82,89,-16,127,-35,-38,1,-9,34,14, 
  /* [86][0][][] */ 127,-13,-29,-52,12,-68,-1,8,-95,-24,-104,-51,-14,-35,22,70, 
  /* [87][0][][] */ -108,127,39,-37,32,34,-58,-3,-17,-67,29,16,-65,-42,-92,-38, 
  /* [88][0][][] */ -21,39,-23,-47,91,-39,-46,-83,-38,32,61,-40,-32,-4,8,-127, 
  /* [89][0][][] */ 16,12,70,-67,10,58,-46,127,-11,-80,47,56,21,110,8,72, 
  /* [90][0][][] */ -9,43,-127,-25,60,10,90,-26,43,46,21,-8,-10,-56,19,-23, 
  /* [91][0][][] */ 54,-34,-41,2,-36,-127,-37,53,-14,-58,-44,-56,31,3,5,-18, 
  /* [92][0][][] */ 32,-30,127,111,-23,-53,-16,-37,30,18,-88,1,4,114,82,-49, 
  /* [93][0][][] */ 127,-6,-29,-35,-33,-41,12,43,-57,4,-61,-49,-32,-32,-4,30, 
  /* [94][0][][] */ -30,-10,127,56,93,-2,-5,46,-53,-15,22,75,33,81,-82,7, 
  /* [95][0][][] */ -127,46,6,-13,52,32,-13,1,-13,10,118,-38,-43,-3,9,-25, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00059395545395091176, 0.00059589825104922056, 0.00035687716444954276, 0.0021465315949171782, 0.00056444935034960508, 0.00069542246637865901, 0.00048835133202373981, 0.00083733838982880116, 0.00081925687845796347, 0.00027690763818100095, 0.0004331928794272244, 0.00083406537305563688, 0.0005305904196575284, 0.00039481380372308195, 0.00094256096053868532, 0.00049518392188474536, 0.00089530512923374772, 0.00046072137774899602, 0.00079875474330037832, 0.0013940803473815322, 0.0012585417134687304, 0.00031242601107805967, 0.00095753307687118649, 0.00038241286529228091, 0.00049829529598355293, 0.00085181673057377338, 0.00070702884113416076, 0.00044401633203960955, 0.0012604981893673539, 0.0016244739526882768, 0.00030425199656747282, 0.00049713806947693229, 0.0005854847258888185, 0.00093947950517758727, 0.00083755998639389873, 0.001154848956502974, 0.00034280380350537598, 0.00074738881085067987, 0.00072474020998924971, 0.00031436022254638374, 0.00088067405158653855, 0.00046984374057501554, 0.00045500838314183056, 0.00064421264687553048, 0.00051118660485371947, 0.00074692355701699853, 0.00040694273775443435, 0.00034392924862913787, 0.00087439711205661297, 0.00067639379994943738, 0.0015125245554372668, 0.0016821615863591433, 0.00063364539528265595, 0.00038833706639707088, 0.00031871855026111007, 0.00060147064505144954, 0.0012123106280341744, 0.00039880265831016004, 0.00086717167869210243, 0.0010922469664365053, 0.00028095633024349809, 0.00046765900333411992, 0.001296123256906867, 0.00070970488013699651, 0.00047584209823980927, 0.00086325552547350526, 0.0014268286759033799, 0.00086826790357008576, 0.00035253632813692093, 0.0004957896308042109, 0.00058013579109683633, 0.0005547009059228003, 0.00047195205115713179, 0.00075332692358642817, 0.00078703195322304964, 0.0011689693201333284, 0.00012316671200096607, 0.00081367534585297108, 0.0002585842739790678, 0.00084069056902080774, 0.00083419826114550233, 0.001872765482403338, 0.00054182478925213218, 0.0014473668998107314, 0.00045419816160574555, 0.000902041036169976, 0.000530374760273844, 0.00087396957678720355, 0.0006125290528871119, 0.0011530248448252678, 0.00043102505151182413, 0.0013927252730354667, 0.00037101772613823414, 0.00041441080975346267, 0.0010492099681869149, 0.00064194982405751944, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -34056, -2982, -17423, -24645, 6428, -10878, -13205, -43899, -2699, 20664, 49591, -20698, -1657, -22547, 41043, -36364, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00063998583937063813, 0.00064392865169793367, 0.00066010304726660252, 0.00065745797473937273, 0.00063774106092751026, 0.00083722418639808893, 0.00074437778675928712, 0.00040626968257129192, 0.00051260367035865784, 0.00053845671936869621, 0.0003606446844059974, 0.0003794117656070739, 0.00067314767511561513, 0.00090765685308724642, 0.00042259736801497638, 0.00037961098132655025, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -3,-2,-28,27,17,-11,39,55,-26,41,3,-26,-3,18,-6,22,17,-16,-4,-28,43,-5,16,107,16,72,22,-3,27,-10,40,23,-45,79,31,-34,46,36,16,-25,-60,-41,38,45,21,44,-127,-7, 
  /* [1][0][][] */ -28,12,20,-1,-37,-7,-3,49,-57,-23,12,-41,-26,4,-14,0,-37,83,-16,27,-23,-6,-29,-9,6,-22,19,30,-42,-93,-27,11,18,-3,26,-10,-11,-34,19,23,-21,8,127,4,22,-35,-10,-10, 
  /* [2][0][][] */ -27,34,3,-30,14,-76,16,-41,-9,35,48,24,-5,16,-29,-21,-31,-47,-15,-14,8,-13,3,-127,5,78,14,16,0,-11,-5,30,-17,65,35,13,62,31,44,-11,-44,9,-2,-10,0,-19,5,24, 
  /* [3][0][][] */ -13,33,6,-18,2,0,15,11,23,7,10,46,-127,19,2,0,-1,-3,-2,1,-49,9,9,17,6,-8,9,28,8,72,19,24,-14,11,28,9,-3,9,47,19,12,15,5,-42,-10,-5,18,18, 
  /* [4][0][][] */ 32,-17,14,-6,53,36,14,-27,-42,23,-2,-18,7,-7,-17,9,0,-9,-78,-3,-2,-6,23,57,-20,-26,6,39,13,-64,12,-4,13,-56,23,-127,25,39,0,-19,-23,15,0,-28,-1,-24,10,13, 
  /* [5][0][][] */ 12,-28,-14,42,1,-14,2,27,-18,-2,58,15,11,34,-13,24,-11,26,41,5,10,1,3,-13,-5,-12,3,-18,-1,-14,-5,16,84,-127,-6,14,-17,-7,12,-1,-107,73,39,-22,-18,-9,-81,-14, 
  /* [6][0][][] */ 22,-26,12,3,-16,-9,22,-4,-6,-3,0,-5,-15,5,-4,16,5,2,127,23,1,10,19,-22,4,9,19,-19,-17,-6,3,16,17,-13,33,-30,1,-36,67,40,-2,-8,6,7,-13,14,0,-3, 
  /* [7][0][][] */ -62,-21,-32,38,-28,83,-6,60,7,80,44,127,78,14,-8,9,15,-3,7,-32,-7,-17,-12,57,3,14,-41,-36,-6,-7,-6,-21,18,-18,-45,-24,-8,-47,95,45,-30,41,-37,-78,12,3,-26,35, 
  /* [8][0][][] */ -44,-35,-20,-17,1,-1,-20,40,11,-51,-9,36,34,-11,-19,64,8,55,-37,-6,-35,-41,-10,-13,15,-11,20,58,-2,121,0,21,-7,9,-16,-127,-77,47,35,29,33,-9,118,-17,6,37,22,9, 
  /* [9][0][][] */ -31,-20,-9,36,9,-14,38,14,71,-45,4,63,-60,11,36,34,-24,21,-28,-2,36,-26,-8,-19,11,18,80,-30,22,22,18,50,12,27,84,-115,-29,-127,-93,95,-10,15,68,4,-13,0,-42,-53, 
  /* [10][0][][] */ -3,-25,-19,-127,51,72,-18,-24,-34,32,18,1,94,-62,-45,23,69,-9,27,-6,12,-9,31,53,-48,-89,-1,-41,31,-25,53,-68,3,-89,-1,-9,-2,-22,-17,-65,-34,-55,-16,19,34,5,1,-14, 
  /* [11][0][][] */ -28,85,-27,33,17,-28,-18,-4,22,50,26,15,-25,65,22,-7,-36,33,-16,23,-84,-100,23,-34,21,-27,55,30,21,2,26,18,30,-33,-19,-82,65,16,15,-127,-8,53,78,-46,-9,-27,53,36, 
  /* [12][0][][] */ 89,25,-1,-11,-16,23,-3,83,6,-5,-30,-25,-28,21,-40,1,-22,-10,-11,-15,24,-20,11,3,5,-7,21,12,12,24,-18,29,-24,-49,-2,16,3,-23,-6,47,-17,-71,7,-127,-52,9,91,-4, 
  /* [13][0][][] */ 11,11,18,4,18,-10,0,-5,17,20,22,15,-7,7,13,-16,2,0,8,-2,-7,-11,10,-11,-15,1,8,127,4,12,6,14,-5,2,-32,20,13,2,-1,-29,-16,1,-6,13,2,1,0,-3, 
  /* [14][0][][] */ 51,-62,33,-38,59,34,16,-64,-44,-86,-87,104,-32,-38,76,1,23,13,-12,79,11,34,25,-5,-25,60,-40,-118,-28,-45,35,-29,-1,77,-127,-40,-60,47,61,9,-18,9,53,0,-14,23,-15,-58, 
  /* [15][0][][] */ 7,-42,-64,-69,42,-6,80,-68,-61,44,52,-62,85,21,-78,56,38,55,81,-87,-102,20,60,6,-121,44,-36,43,45,0,44,-47,24,57,74,127,16,-73,8,-82,74,65,86,-47,17,-59,-31,79, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.02719939686357975, 0.027366966009140015, 0.028054378926753998, 0.027941962704062462, 0.02710399404168129, 0.035582028329372406, 0.031636055558919907, 0.017266461625695229, 0.021785655990242958, 0.022884409874677658, 0.015327398665249348, 0.016124999150633812, 0.0286087766289711, 0.038575414568185806, 0.017960388213396072, 0.016133466735482216, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 10959, 52905, -705, 49594, 1179, 143708, -550, 41142, 3275, 32268, 26567, 6788, 2424, 33991, 3021, -6292, -1641, -731, 1674, -1202, -1559, -1415, -14620, -8282, -3990, 55433, 138950, 92024, -577, 9168, -5924, -973, 30871, -1231, 53111, -3344, 83363, 7301, 53239, 282, 2662, 55580, 654, 2778, 42187, -3910, 883, 46526, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 4.7490379074588418e-05, 3.384261071914807e-05, 0.00014725337678100914, 4.5186214265413582e-05, 0.00010593074694043025, 5.5573702411493286e-05, 0.0001010984560707584, 0.00013210345059633255, 0.00010586404096102342, 5.185672125662677e-05, 4.5723987568635494e-05, 6.475339614553377e-05, 3.6272100260248408e-05, 2.7501035219756886e-05, 0.00015137917944230139, 0.00010714495147112757, 9.7786672995425761e-05, 0.00010915589518845081, 0.00013460528862196952, 0.00015444280870724469, 9.8429991339799017e-05, 0.00022766509209759533, 5.4470259783556685e-05, 8.1862635852303356e-05, 0.00016524872626177967, 7.886716048233211e-05, 2.8334812668617815e-05, 7.7258446253836155e-05, 6.6615502873901278e-05, 8.1652207882143557e-05, 0.00010942312655970454, 0.00013820006279274821, 3.8988226151559502e-05, 0.00017161239520646632, 2.3993039576453157e-05, 5.6565790146123618e-05, 7.1686110459268093e-05, 6.2040024204179645e-05, 0.00010613674385240301, 0.00018701150838751346, 0.00012846301251556724, 0.0001063105373759754, 8.7457017798442394e-05, 8.6507265223190188e-05, 2.4609185857116245e-05, 0.00011066576553275809, 0.00010863909847103059, 1.9690380213432945e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 69,-114,94,70,59,-41,121,-66,71,-72,-92,47,71,-46,-75,-84,104,70,53,91,94,-71,-88,52,-40,-51,-83,-67,-69,76,-64,-127,-22,51,94,80,-65,56,-45,-27,55,-67,68,70,-90,12,71,-37, 85,-113,127,82,-79,-76,-60,-90,87,-112,-62,76,104,-114,-93,95,-35,95,76,127,100,-112,66,75,-55,-91,-102,-76,64,69,-26,-117,-99,78,102,101,-90,87,-94,-3,84,-95,101,90,-62,-127,103,-120, 49,-48,62,34,17,-50,-60,-39,40,-44,4,37,47,-86,-61,6,-70,44,44,69,39,-51,43,19,-23,-63,-48,-22,31,32,95,-94,-82,48,48,51,-36,45,-39,-7,41,-37,43,51,3,-6,39,-84, 
  /* [0][1][][] */ 96,-127,-45,88,63,-92,127,-95,91,-122,-75,87,109,-110,-10,-127,127,110,79,-42,96,104,-127,81,73,-79,-72,-109,-127,100,-75,-12,-79,75,127,100,-83,82,-84,83,86,-101,93,95,-80,112,100,-98, 127,-113,-68,127,-127,-127,-108,-127,127,-127,-127,127,127,-127,-26,103,-65,127,127,-67,127,127,80,127,127,-127,-127,-127,59,127,-25,25,-127,127,125,127,-127,127,-127,127,127,-127,127,127,-127,-7,127,-127, 69,-79,-39,70,46,-70,-69,-64,55,-63,-61,71,60,-48,-24,17,-66,58,62,-41,67,60,65,59,68,-77,-49,-46,38,55,127,23,-69,74,58,46,-51,58,-63,62,65,-46,65,55,-59,-61,64,-68, 
  /* [0][2][][] */ 59,-63,-53,49,36,-61,59,-51,53,-77,-33,50,76,-88,87,-80,87,58,41,-36,25,-20,-82,37,-38,-37,-54,-53,-74,43,-43,71,-77,48,56,49,-26,49,-51,-95,50,-62,44,46,-3,30,44,-91, 78,-71,-35,85,-51,-71,-90,-67,42,-70,-76,76,84,-60,127,34,-48,69,66,-61,62,-14,54,67,-50,-68,-85,-63,43,65,-16,109,-69,74,59,71,-46,73,-55,-102,76,-73,65,59,-71,57,63,-51, 40,-47,-34,52,37,-27,-36,-37,19,-60,-67,42,42,6,59,32,-48,26,41,-35,29,-7,46,42,-30,-39,-49,-27,36,33,65,69,-9,47,25,21,-22,42,-39,-47,31,-36,45,34,-70,13,49,6, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0020183410961180925, 0.0014383109519258142, 0.0062582683749496937, 0.0019204140407964587, 0.0045020566321909428, 0.0023618822451680899, 0.0042966841720044613, 0.0056143966503441334, 0.0044992216862738132, 0.0022039106115698814, 0.0019432693952694535, 0.0027520193252712488, 0.0015415642410516739, 0.0011687939986586571, 0.0064336149953305721, 0.0045536602847278118, 0.004155933391302824, 0.0046391254290938377, 0.0057207248173654079, 0.0065638190135359764, 0.0041832746937870979, 0.0096757663413882256, 0.0023149859625846148, 0.003479161998257041, 0.0070230704732239246, 0.0033518543932586908, 0.0012042295420542359, 0.0032834839075803757, 0.0028311589267104864, 0.0034702187404036522, 0.0046504829078912735, 0.0058735026977956295, 0.0016569995786994696, 0.0072935265488922596, 0.0010197041556239128, 0.0024040460120886564, 0.0030466595198959112, 0.0026367008686065674, 0.0045108115300536156, 0.0079479888081550598, 0.0054596778936684132, 0.0045181978493928909, 0.0037169230636209249, 0.0036765586119145155, 0.0010458903852850199, 0.0047032949514687061, 0.0046171615831553936, 0.0008368411217816174, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 597, 713, 3435, 480, 11644, 34719, 4197, -807, -3014, -1048, 984, 1553, 4313, 1013, 31695, 5351, 1558, -2132, -983, 9685, -1844, 19128, 15973, 8451, 18231, 1450, 8206, 4296, 8557, -1071, 21188, 2710, 181, -456, 6082, 4441, -2366, 537, -745, 8439, -907, -986, -1253, -95, 1069, 4198, 742, 1068, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00027780758682638407, 0.00087128026643767953, 0.0001873061410151422, 0.00025605616974644363, 0.00017822209338191897, 0.00011691632244037464, 0.00028313332586549222, 0.00019173405598849058, 0.00016030010010581464, 0.00046627808478660882, 0.00081166444579139352, 0.00020034772751387209, 0.00028803583700209856, 0.00069263327168300748, 0.00011490411270642653, 0.00020515274081844836, 0.00025291973724961281, 0.00025392626412212849, 0.00017926731379702687, 0.00011379118950571865, 0.00033759020152501762, 0.00014187161286827177, 0.00022417934087570757, 0.00016478405450470746, 0.00011068666935898364, 0.00015597185119986534, 0.0008593381498940289, 0.00040326756425201893, 0.00017214333638548851, 0.00037803259328939021, 0.00013283523730933666, 0.00033522135345265269, 0.00090300192823633552, 0.00022196782811079174, 0.00058985257055610418, 0.00039171022945083678, 0.00050262000877410173, 0.00029782691854052246, 0.00020875701738987118, 0.00025657334481365979, 0.00020738717284984887, 0.00026955254725180566, 0.00028639755328185856, 0.00036807771539315581, 0.0018632402643561363, 0.00028557094628922641, 0.00031707275775261223, 0.0010884478688240051, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,-29,-54,91,-32,59,39,-20, 
  /* [1][0][][] */ 24,7,33,-26,21,2,96,127, 
  /* [2][0][][] */ -25,-5,-15,25,-127,-31,17,-30, 
  /* [3][0][][] */ 103,13,-13,-127,-79,23,-2,-34, 
  /* [4][0][][] */ -127,63,26,-5,82,-6,65,21, 
  /* [5][0][][] */ -105,-39,-60,-19,-127,57,-27,91, 
  /* [6][0][][] */ 72,-127,-41,-30,-57,4,37,43, 
  /* [7][0][][] */ -67,11,-28,78,127,-28,-6,-7, 
  /* [8][0][][] */ 121,17,-73,-81,0,17,-127,-90, 
  /* [9][0][][] */ -39,-127,-18,43,23,74,-50,73, 
  /* [10][0][][] */ -70,-56,-10,34,-127,64,31,20, 
  /* [11][0][][] */ 98,35,61,-12,-58,-33,-50,-127, 
  /* [12][0][][] */ -22,49,68,-2,5,-117,127,26, 
  /* [13][0][][] */ 20,-45,23,-23,83,71,127,-20, 
  /* [14][0][][] */ 93,6,37,48,-127,38,-57,-19, 
  /* [15][0][][] */ -23,-127,-55,-97,-25,107,-121,-7, 
  /* [16][0][][] */ -79,-13,16,21,-127,-24,32,41, 
  /* [17][0][][] */ -7,127,-24,-8,-32,-84,64,-59, 
  /* [18][0][][] */ 96,-73,-57,15,-36,50,5,127, 
  /* [19][0][][] */ 71,-127,-100,-46,111,97,46,-29, 
  /* [20][0][][] */ 127,3,16,21,2,27,21,-64, 
  /* [21][0][][] */ 18,21,127,-71,-58,65,-103,-35, 
  /* [22][0][][] */ -88,25,76,-27,-69,71,-127,-95, 
  /* [23][0][][] */ -60,-41,46,22,-127,43,104,16, 
  /* [24][0][][] */ 127,20,-16,-50,-106,-51,61,26, 
  /* [25][0][][] */ 29,-71,26,-27,127,111,73,-42, 
  /* [26][0][][] */ 65,-33,44,-33,-10,-127,85,-59, 
  /* [27][0][][] */ -9,-127,35,-15,-19,-70,40,-12, 
  /* [28][0][][] */ -127,-20,-2,104,68,18,95,60, 
  /* [29][0][][] */ 2,22,-10,-1,3,42,-127,-83, 
  /* [30][0][][] */ 101,-37,-32,-34,-85,47,-127,-81, 
  /* [31][0][][] */ 13,-48,46,22,15,-44,127,-23, 
  /* [32][0][][] */ -61,19,-10,-5,-34,-58,-127,20, 
  /* [33][0][][] */ -4,-9,-17,9,-127,-23,-37,-9, 
  /* [34][0][][] */ 21,-118,-6,9,-3,127,-67,42, 
  /* [35][0][][] */ -22,-38,-127,-1,-7,-66,44,-61, 
  /* [36][0][][] */ 47,127,20,-6,-42,-7,-12,-52, 
  /* [37][0][][] */ -127,66,-1,-33,79,-10,-27,-113, 
  /* [38][0][][] */ -127,-5,-45,-5,40,9,15,83, 
  /* [39][0][][] */ -45,20,35,23,40,-69,127,8, 
  /* [40][0][][] */ -43,12,-9,4,-72,108,127,-56, 
  /* [41][0][][] */ -127,4,-14,-45,-100,-108,-100,56, 
  /* [42][0][][] */ -52,-127,-42,4,-7,77,-117,-50, 
  /* [43][0][][] */ -76,20,-6,-127,60,30,57,-12, 
  /* [44][0][][] */ 127,-30,22,-37,2,0,-1,8, 
  /* [45][0][][] */ -83,-127,-16,-27,15,-52,98,-10, 
  /* [46][0][][] */ 99,1,6,-9,127,-47,-23,1, 
  /* [47][0][][] */ 123,-38,-109,127,47,50,51,-25, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00057928770547732711, 0.0018168040551245213, 0.00039057299727573991, 0.00053393136477097869, 0.00037163082743063569, 0.00024379530805163085, 0.00059039297048002481, 0.00039980612928047776, 0.00033425967558287084, 0.00097228860249742866, 0.0016924923984333873, 0.0004177674709353596, 0.00060061574913561344, 0.0014442871324717999, 0.00023959942336659878, 0.00042778695933520794, 0.00052739126840606332, 0.00052949006203562021, 0.00037381035508587956, 0.00023727874213363975, 0.00070394709473475814, 0.00029583237483166158, 0.00046746144653297961, 0.00034360968857072294, 0.00023080516257323325, 0.00032523437403142452, 0.0017919021192938089, 0.00084089831216260791, 0.00035895535256713629, 0.00078827806282788515, 0.00027698962367139757, 0.00069900759262964129, 0.0018829504260793328, 0.00046284997370094061, 0.0012299675727263093, 0.00081679882714524865, 0.0010480692144483328, 0.00062103226082399487, 0.00043530261609703302, 0.0005350097781047225, 0.00043244622065685689, 0.00056207418674603105, 0.00059719959972426295, 0.0007675200467929244, 0.0038852507714182138, 0.00059547595446929336, 0.00066116388188675046, 0.0022696445230394602, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -12221, 27020, -15974, -10452, 43209, -23111, 26821, 27724, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00048387161223217845, 0.00048327806871384382, 0.0013695444213226438, 0.0013546281261369586, 0.00047087500570341945, 0.00041203555883839726, 0.00059969967696815729, 0.00073007598984986544, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -70,-105,-15,-27,-5,-15,-16,-38,-116,95,-29,71,61,41,100,-25,-14,-65,-54,-42,-27,-69,-6,-12,49,-80,-2,51,-68,30,15,-127,-60,-67,112,52,25,8,31,-33,103,2,46,-53,-36,-9,-59,-76, 
  /* [1][0][][] */ 7,10,127,-6,13,3,-8,-103,37,20,-3,18,-66,-14,39,-117,-21,-76,22,-1,25,32,11,-16,-34,-40,11,-10,24,-5,4,-24,-12,4,1,-25,-44,-41,48,-57,3,76,35,3,-24,40,32,11, 
  /* [2][0][][] */ 22,-67,-8,-63,32,37,2,-12,2,9,-3,6,-43,77,10,21,-45,121,-1,-31,-16,-1,-56,-6,127,-17,6,-19,-18,33,10,-45,-24,22,-2,19,-3,-14,12,-3,-2,-6,-2,-1,35,47,-53,-73, 
  /* [3][0][][] */ 10,-71,-8,8,8,-12,-4,2,-21,-26,9,14,3,-17,22,15,-17,-37,-9,27,-9,13,-21,1,0,70,-11,-12,-5,4,127,11,17,23,10,0,4,1,-12,-1,17,5,-14,47,4,-29,15,29, 
  /* [4][0][][] */ -63,-1,3,-28,7,-79,9,-6,73,-74,46,-41,-63,-3,-31,-19,61,9,-3,49,-4,2,21,6,11,60,-15,122,-55,7,-19,-28,7,-127,-43,-14,2,-7,41,-16,-71,25,-19,54,-67,-13,-12,-38, 
  /* [5][0][][] */ 18,-16,5,-3,-44,34,16,88,2,23,25,-6,-15,-33,-32,79,17,-61,29,2,127,-43,13,44,22,23,-45,-95,-15,4,18,-3,2,-69,-27,-46,74,19,-14,45,32,-71,-24,41,123,-20,2,-31, 
  /* [6][0][][] */ -21,5,-1,-9,37,-37,-7,-22,-32,-17,29,-3,-64,68,7,-33,80,52,-61,27,-127,80,35,-50,26,-27,-33,-62,-12,10,3,44,18,-80,8,40,-13,-32,6,-83,33,13,37,43,84,-8,25,14, 
  /* [7][0][][] */ 11,24,-71,44,-9,44,12,70,-20,-14,89,-34,-18,-53,-20,43,14,-127,24,-82,108,42,25,-84,44,-8,4,2,1,43,5,48,6,71,-24,8,3,-43,-39,-52,10,-57,46,74,-42,-34,3,43, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.020564543083310127, 0.020539317280054092, 0.058205634355545044, 0.057571694254875183, 0.020012186840176582, 0.017511511221528053, 0.025487236678600311, 0.031028229743242264, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -54695, 182, 14265, -679, 2911, -10668, 763, 31173, 2804, 28270, -1562, 29815, -6474, -948, 32031, 13204, -1079, 11715, 29844, 7282, 1129, -114, -2753, 32301, -6906, 29966, 44881, 25047, 4017, 3756, -340, 1226, 1227, 17156, -6458, 19750, -14902, 22902, -22910, 186359, 27012, 23841, 11578, -1088, 14053, 5906, 1853, -2924, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00027166388463228941, 0.00028852111427113414, 0.00016064867668319494, 0.00026887896819971502, 0.00010637530795065686, 9.4699862529523671e-05, 0.00082318170461803675, 0.00011306167289149016, 0.00014448486035689712, 0.00019284701556898654, 6.5843567426782101e-05, 0.0001583797566127032, 0.0003011183871421963, 0.00030441369744949043, 7.7099597547203302e-05, 0.0001246883039129898, 0.00025272546918131411, 0.00033854960929602385, 7.3991555836983025e-05, 0.00015365122817456722, 0.00039773303433321416, 0.00017273816047236323, 0.0002028729795711115, 6.647184636676684e-05, 0.00014963533612899482, 0.00012436880206223577, 0.0003211693256162107, 0.00011441427341196686, 0.00014546557213179767, 0.00014497216034214944, 9.5273033366538584e-05, 0.00022299894772004336, 0.00068212579935789108, 0.0001555673370603472, 0.00020012356981169432, 0.00012747061555273831, 0.00022987449483480304, 0.00012331016478128731, 0.00026483769761398435, 1.4711022231495008e-05, 0.00011831551819341257, 4.9788039177656174e-05, 0.00014068633026909083, 0.00010270490020047873, 0.00017796926840674132, 8.4277220594231039e-05, 0.00024101909366436303, 0.00013244272849988192, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 8,-6,16,105,10,79,3,25,6,5,2,5,-9,-11,-37,4,0,8,-29,-105,-17,-27,127,-5,-7,4,-6,15,-6,5,12,113,18,32,43,-25,5,30,-4,6,23,-67,-10,-10,17,-6,-9,-7, 127,7,11,-127,29,99,13,9,118,127,9,38,-62,-24,8,8,127,-54,-60,-43,-109,24,-106,22,19,70,-35,-93,22,21,3,-126,14,-63,127,16,-38,-50,-18,122,-75,-112,-27,9,-34,-16,-127,24, -30,-5,7,12,-3,77,5,20,23,5,-14,28,-17,-6,16,6,-88,27,-13,83,-34,-19,-18,-5,-8,-63,-5,29,-18,5,0,-24,3,-26,21,-17,2,46,39,-13,53,43,-10,13,-39,4,-6,3, 
  /* [0][1][][] */ 122,6,-2,-92,18,-33,38,-17,2,4,-12,54,-8,0,21,-34,-3,-48,-50,-79,10,-74,-118,-17,3,98,-13,-127,-13,35,8,-111,11,-49,-6,127,-2,55,-43,43,-58,-127,38,-88,-46,-18,-10,-5, 23,-124,-127,108,-127,-127,-125,-127,-127,-97,127,-127,127,127,34,-127,-71,127,127,-91,127,127,112,127,127,-127,-127,36,-127,-127,94,127,-127,127,-36,-41,127,-127,127,123,127,-102,127,127,127,-123,96,102, 52,3,48,-14,5,-58,47,22,-23,10,-97,-9,0,-36,127,8,57,-65,-63,75,14,-43,12,-32,-3,5,-37,74,18,39,-3,4,28,-42,9,66,-5,64,72,-12,-77,-5,-84,-30,24,-15,-11,7, 
  /* [0][2][][] */ -50,-5,22,-11,12,41,-36,20,4,-26,11,34,16,-7,-41,17,3,22,-5,98,0,-31,-13,-10,-7,30,2,65,-8,6,42,-40,-22,-39,-39,-41,-1,26,8,-17,10,6,41,-38,-40,16,-5,22, 66,127,73,24,14,-11,127,31,11,-5,42,23,-7,4,-96,23,-48,-54,-30,110,-45,52,14,22,36,-62,-39,44,82,2,127,18,89,-25,1,-37,-28,-20,-14,127,-26,-6,-42,43,18,-35,13,-127, -39,-5,6,-1,2,1,-59,8,-20,-13,-36,-40,28,-2,-5,12,29,22,-6,-127,19,-4,5,-8,-6,8,-9,-56,-17,9,6,4,-24,87,-44,-25,-5,36,33,-61,6,11,-46,7,-49,127,-2,3, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.011545714922249317, 0.012262146919965744, 0.0068275686353445053, 0.01142735593020916, 0.004520950373262167, 0.0040247440338134766, 0.034985221922397614, 0.0048051211051642895, 0.006140606477856636, 0.0081959981471300125, 0.0027983514592051506, 0.0067311394959688187, 0.012797531671822071, 0.012937582097947598, 0.0032767327502369881, 0.0052992529235780239, 0.010740832425653934, 0.014388358220458031, 0.0031446409411728382, 0.0065301768481731415, 0.016903653740882874, 0.0073413713835179806, 0.0086221015080809593, 0.002825053408741951, 0.0063595017418265343, 0.0052856737747788429, 0.013649695552885532, 0.0048626065254211426, 0.0061822864226996899, 0.0061613167636096478, 0.004049103707075119, 0.0094774551689624786, 0.028990345075726509, 0.0066116116940975189, 0.0085052512586116791, 0.005417501088231802, 0.0097696660086512566, 0.0052406820468604565, 0.011255602352321148, 0.00062521843938156962, 0.0050284094177186489, 0.0021159916650503874, 0.0059791691601276398, 0.0043649580329656601, 0.0075636939145624638, 0.0035817818716168404, 0.010243311524391174, 0.0056288158521056175, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 84622, 6820, 10709, 9547, 3497, 12787, -2474, -135, 2003, 4229, 2456, 1375, 1730, -3387, 1256, -2823, 7194, 20798, -804, 13198, 5151, 3212, 11684, -405, 4049, 3854, 28165, 11756, -5, -2795, 148, 3337, -2734, 6919, 6556, 20045, 6705, 6308, 47446, 2439, -2002, 3472, 3169, 6718, 7739, 2790, -939, 3414, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 5.2220922952983528e-05, 0.00030061547295190394, 0.00015359082317445427, 0.00035534964990802109, 0.00065934943268075585, 0.00040024975896812975, 0.00078217254485934973, 0.0010011811973527074, 0.00037169616553001106, 0.00034159372444264591, 0.00091672298731282353, 0.00029807112878188491, 0.00050680735148489475, 0.00021412201749626547, 0.00037838160642422736, 0.0013204388087615371, 0.00023738780873827636, 0.00021482075680978596, 0.0011514753568917513, 0.00019097533368039876, 0.00023511808831244707, 0.00026941602118313313, 0.00034279780811630189, 0.00076207873644307256, 0.00023921196407172829, 0.00025303472648374736, 0.00014218079741112888, 0.00029714609263464808, 0.00055045972112566233, 0.00090713612735271454, 0.00049052329268306494, 0.00030432356288656592, 0.0007668863981962204, 0.00028621655656024814, 0.00019752001389861107, 0.00010343966278014705, 0.00059458758914843202, 0.00024496630067005754, 5.1539325795602053e-05, 0.0018522936152294278, 0.00039273870061151683, 0.00077859230805188417, 0.0001972273166757077, 0.00025887828087434173, 0.00017926297732628882, 0.00033379212254658341, 0.00081869540736079216, 0.00082926993491128087, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 65,13,-4,0,127,14,-47,-22, 
  /* [1][0][][] */ 6,0,-26,127,-15,-2,23,-4, 
  /* [2][0][][] */ 8,-121,2,58,57,-107,127,20, 
  /* [3][0][][] */ 127,1,52,-6,-4,-34,57,-23, 
  /* [4][0][][] */ -44,-24,127,-24,-10,-43,9,-103, 
  /* [5][0][][] */ 48,-29,44,-127,71,46,-89,38, 
  /* [6][0][][] */ -28,117,0,65,69,70,-79,-127, 
  /* [7][0][][] */ -28,127,-41,9,4,-11,16,-16, 
  /* [8][0][][] */ 73,32,12,-36,-127,-30,-56,-62, 
  /* [9][0][][] */ -68,67,27,11,127,-36,-40,-35, 
  /* [10][0][][] */ -51,5,20,127,-3,-32,18,-29, 
  /* [11][0][][] */ -127,-31,-6,-33,56,50,-21,-21, 
  /* [12][0][][] */ 127,15,21,33,-30,-25,21,-17, 
  /* [13][0][][] */ 19,9,-122,-38,1,108,-127,100, 
  /* [14][0][][] */ -4,-24,-65,127,-43,10,-2,-13, 
  /* [15][0][][] */ -3,127,-2,-3,14,-6,-24,-73, 
  /* [16][0][][] */ -39,-77,11,-119,-5,-60,127,-46, 
  /* [17][0][][] */ 34,127,-53,13,-54,86,-97,-27, 
  /* [18][0][][] */ -6,13,-127,-6,-6,9,-5,90, 
  /* [19][0][][] */ -56,-11,29,-9,-127,21,25,7, 
  /* [20][0][][] */ -36,12,-31,-13,54,-55,127,21, 
  /* [21][0][][] */ -49,55,7,11,-127,-19,3,-70, 
  /* [22][0][][] */ -41,-55,-1,-34,127,15,7,71, 
  /* [23][0][][] */ -10,-21,-11,14,-17,118,-112,-127, 
  /* [24][0][][] */ 12,19,-127,23,-18,43,-35,86, 
  /* [25][0][][] */ 106,-4,-10,127,32,12,-2,-24, 
  /* [26][0][][] */ 13,-44,-15,20,-8,108,127,5, 
  /* [27][0][][] */ 28,-26,-4,-8,127,-5,6,19, 
  /* [28][0][][] */ -6,72,-77,40,52,21,29,127, 
  /* [29][0][][] */ -17,-40,4,-8,5,127,-105,-26, 
  /* [30][0][][] */ 4,3,-14,-127,-7,-5,11,-12, 
  /* [31][0][][] */ -107,-27,-17,15,-127,25,7,-18, 
  /* [32][0][][] */ -13,55,45,-127,-22,-3,-60,-41, 
  /* [33][0][][] */ -29,-13,-8,9,-127,-7,61,7, 
  /* [34][0][][] */ -49,127,57,21,-6,-26,37,-11, 
  /* [35][0][][] */ -49,127,103,-70,-31,-65,76,-63, 
  /* [36][0][][] */ 4,13,65,11,46,127,-32,-22, 
  /* [37][0][][] */ 64,-6,15,6,25,-127,45,-78, 
  /* [38][0][][] */ -5,-108,73,46,-38,100,-127,65, 
  /* [39][0][][] */ 7,-113,-25,1,4,11,-84,-127, 
  /* [40][0][][] */ 127,58,-106,106,-92,32,-37,-17, 
  /* [41][0][][] */ -21,-127,31,-38,15,110,-74,86, 
  /* [42][0][][] */ -22,15,88,-127,3,-15,-22,-99, 
  /* [43][0][][] */ -127,-42,-5,-122,76,-45,9,-12, 
  /* [44][0][][] */ -6,-29,-37,-5,-32,106,127,-105, 
  /* [45][0][][] */ -127,-90,-21,30,30,48,-52,8, 
  /* [46][0][][] */ 28,127,48,28,5,-6,-3,25, 
  /* [47][0][][] */ -127,-41,0,88,-45,72,-25,-23, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0001490986323915422, 0.00085830269381403923, 0.00043852505041286349, 0.0010145769920200109, 0.0018825423903763294, 0.0011427736608311534, 0.0022332209628075361, 0.0028585237450897694, 0.0010612488258630037, 0.00097530178027227521, 0.0026173829101026058, 0.00085103814490139484, 0.0014470117166638374, 0.00061135075520724058, 0.0010803367476910353, 0.0037700524553656578, 0.00067777809454128146, 0.00061334576457738876, 0.0032876364421099424, 0.00054526346502825618, 0.00067129771923646331, 0.00076922349398955703, 0.00097873958293348551, 0.0021758500952273607, 0.00068298634141683578, 0.00072245241608470678, 0.00040594770689494908, 0.00084839708870276809, 0.001571645843796432, 0.0025900108739733696, 0.0014005182310938835, 0.00086888979421928525, 0.0021895766258239746, 0.00081719155423343182, 0.00056394952116534114, 0.00029533589258790016, 0.0016976374899968505, 0.00069941586116328835, 0.00014715257566422224, 0.0052885785698890686, 0.0011213284451514482, 0.0022229987662285566, 0.00056311383377760649, 0.00073913665255531669, 0.0005118229310028255, 0.00095302704721689224, 0.002337499288842082, 0.0023676911368966103, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -3492, -23735, 22661, 20194, -7611, 4704, 37447, 11379, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00097421446116641164, 0.00053641310660168529, 0.00079354480840265751, 0.0010738780256360769, 0.00073925021570175886, 0.00092628441052511334, 0.00057799136266112328, 0.00051402917597442865, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -20,0,15,-83,17,17,28,-1,4,1,3,-6,78,0,3,12,0,-7,-5,-5,60,-18,-7,7,26,60,11,10,-1,4,6,-127,10,17,11,5,-2,-9,-14,27,17,-23,7,-5,24,-15,8,3, 
  /* [1][0][][] */ -48,-1,9,-19,44,26,-86,90,22,3,-13,-31,5,0,19,41,0,57,23,-56,2,32,127,29,-32,11,68,33,30,-3,23,-13,8,14,-32,-58,11,-64,18,5,-10,2,-96,-22,-65,16,-63,-93, 
  /* [2][0][][] */ -69,-7,-5,8,48,-19,52,53,-21,39,17,11,22,0,-20,64,0,24,-127,5,12,30,18,-5,-23,57,48,28,-1,31,27,30,4,-7,-2,-68,62,-31,0,16,25,-4,-36,30,3,-67,-9,36, 
  /* [3][0][][] */ 17,-2,-5,-3,-3,22,9,-13,51,24,-9,-2,25,0,-26,1,0,10,-1,-7,17,9,-4,-9,-1,-15,-27,4,1,9,0,-8,-27,33,-55,2,-5,6,-5,-127,-11,7,8,-67,-18,-4,3,23, 
  /* [4][0][][] */ -12,-7,72,34,14,3,-5,17,16,-4,0,7,-88,0,-7,9,0,34,18,7,70,-4,-14,1,-18,73,-2,46,16,-5,3,103,1,-11,9,14,11,-12,5,-13,-2,-127,-4,14,-7,11,-2,12, 
  /* [5][0][][] */ -7,44,5,-10,1,56,36,10,-19,28,-1,40,13,0,-127,7,0,11,-29,37,-5,4,-20,37,-10,-11,14,16,-18,34,22,-19,49,38,-40,3,8,8,-51,11,36,-14,21,27,42,49,41,26, 
  /* [6][0][][] */ -46,-76,-8,9,77,-39,-22,2,60,-49,-19,116,6,0,-127,76,0,-19,63,-31,2,1,19,-57,36,-11,7,8,79,-28,-7,5,90,-20,47,6,-9,-8,-52,-29,-25,6,-17,-33,-45,-82,-30,-31, 
  /* [7][0][][] */ -113,-39,-2,8,127,43,84,45,36,-47,4,-14,-44,0,123,114,0,24,5,72,-4,-8,-34,42,8,19,18,20,50,74,73,-20,-27,-32,-23,-3,-8,32,-13,28,82,7,-3,-5,76,-1,71,97, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.041404113173484802, 0.022797556594014168, 0.03372565284371376, 0.045639816671609879, 0.031418133527040482, 0.039367087185382843, 0.024564631283283234, 0.021846240386366844, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 73575, 54305, 65424, 42486, -732, 14697, 7176, 39021, 41459, 36942, 25121, 7508, -46753, -127, 38245, 6721, -204, 40394, 3802, -657, -11094, 7587, 59193, 43046, 40846, 44273, 43750, 28932, -2939, 14077, -10532, -50167, 21949, 115100, 32409, 868, 44067, -364, 193596, -29146, 12251, -30071, 3024, 71863, -990, 125023, 3734, -19764, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 8.8319196947850287e-05, 6.5591128077358007e-05, 8.4736464486923069e-05, 9.0071174781769514e-05, 0.00011774795711971819, 0.00013627695443574339, 0.00017540533735882491, 4.2595027480274439e-05, 6.2315186369232833e-05, 2.4339946321561001e-05, 4.159371746936813e-05, 2.1004168957006186e-05, 0.00016234297072514892, 0.005541567225009203, 6.4956286223605275e-05, 0.00013970299914944917, 0.0027484172023832798, 2.1905685571255162e-05, 6.8275265221018344e-05, 0.00020432134624570608, 7.0278372731991112e-05, 0.00012405167217366397, 9.6942058007698506e-05, 2.9027509299339727e-05, 2.459005918353796e-05, 6.7721368395723403e-05, 2.6763085770653561e-05, 3.6859240935882553e-05, 0.00043276121141389012, 4.8497688112547621e-05, 3.0809169402346015e-05, 0.00019483617506921291, 0.00011017792712664232, 8.6762802311568521e-06, 7.2111419285647571e-05, 0.00031647126888856292, 1.5216619431157596e-05, 0.00031894329003989697, 2.361433143960312e-05, 9.1269634140189737e-05, 5.954029256827198e-05, 0.0002042476407950744, 8.1907179264817387e-05, 1.4305222066468559e-05, 0.00011259700841037557, 4.6764467697357759e-05, 0.00016486633103340864, 5.3606112487614155e-05, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -44,-32,-7,-21,4,-42,-83,-80,-14,-64,16,90,39,-71,119,-52,-113,-81,43,-11,0,-66,-116,-81,-35,-121,-60,-26,75,20,96,29,-127,-84,-1,58,17,43,-127,80,-79,-12,111,-97,-3,-34,-92,108, 73,-3,-35,-30,65,-127,-127,-96,78,-71,-119,126,36,-82,0,61,-52,-121,74,6,13,-114,-127,-70,-7,-127,-111,-66,-55,22,-50,56,29,-127,69,87,14,73,-89,127,-127,8,127,-127,-2,-19,-127,96, -39,26,2,-8,-58,-104,-61,-24,93,-13,-127,51,12,-71,-101,-16,-127,-39,37,13,-7,-63,-36,-29,-9,-41,-50,-18,-16,20,-30,9,103,-92,77,28,21,36,-4,13,-81,8,21,-67,-16,4,-56,7, 
  /* [0][1][][] */ -93,-127,-44,-47,-11,54,98,-112,-11,-127,-20,127,87,-64,32,-107,-121,-102,86,-76,41,-91,-108,-127,44,-105,-62,-32,127,-64,127,85,-44,-77,-12,78,-32,-87,-107,91,45,60,114,-105,-95,-111,80,126, 127,-78,-127,-127,127,40,91,-127,109,-122,-115,127,127,-14,-9,127,-60,-127,127,-127,127,-127,-112,-124,127,-89,-127,-127,-115,-127,-66,127,30,-104,127,127,-75,-127,-101,94,64,127,127,-104,-117,-127,119,127, -62,25,-62,-79,-115,-19,28,-43,127,-23,-83,36,58,-70,-25,-48,-37,-13,50,-72,59,-52,-37,-26,51,-17,-44,-58,17,-88,-39,18,31,-102,115,11,-35,-54,-3,-18,40,55,-2,-64,-55,-40,60,31, 
  /* [0][2][][] */ -65,-112,-36,-26,-4,33,-10,-57,-30,-63,-6,64,73,-127,-127,-68,-43,-23,61,85,49,-38,-15,-58,29,-76,-5,-75,76,33,81,63,103,-28,-34,-6,-77,31,-22,29,10,39,17,-50,106,-75,0,25, 88,-58,-93,-84,75,19,-2,-66,50,-55,-24,49,84,-26,13,89,-24,-29,79,127,79,-32,-18,-61,88,-84,-23,-110,-48,46,-46,111,-16,-43,58,28,-127,53,-10,1,13,34,24,-54,127,-98,-17,38, -35,27,-47,-37,-78,-16,15,-13,68,-9,-15,30,32,-43,113,-35,-93,7,28,59,69,-19,-4,1,39,-3,1,-70,-15,32,-22,36,-87,-48,64,3,-18,26,32,-39,6,38,-1,-15,66,-36,-4,11, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0037535657174885273, 0.0027876228559762239, 0.0036012995988130569, 0.0038280249573290348, 0.005004288163036108, 0.0057917702943086624, 0.0074547268450260162, 0.0018102886388078332, 0.0026483952533453703, 0.0010344476904720068, 0.0017677329014986753, 0.00089267716975882649, 0.0068995761685073376, 0.23551659286022186, 0.0027606422081589699, 0.0059373774565756321, 0.1168077290058136, 0.00093099160585552454, 0.0029016986954957247, 0.0086836572736501694, 0.0029868306592106819, 0.005272196140140295, 0.0041200374253094196, 0.0012336691142991185, 0.0010450774570927024, 0.0028781581204384565, 0.0011374311288818717, 0.0015665176324546337, 0.018392350524663925, 0.0020611516665667295, 0.001309389597736299, 0.0082805370911955833, 0.0046825618483126163, 0.00036874189390800893, 0.0030647353269159794, 0.013450028374791145, 0.00064670632127672434, 0.013555089943110943, 0.0010036090388894081, 0.0038789594545960426, 0.0025304623413830996, 0.0086805243045091629, 0.0034810551442205906, 0.00060797191690653563, 0.0047853728756308556, 0.0019874898716807365, 0.0070068188942968845, 0.0022782597225159407, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 4987, -241, 9977, 7104, 8188, 6752, 18027, -75, -34, -184, 2608, 426, 14855, -97926784, 3917, 21634, -79051576, -126, -907, 21820, 2688, -65, -110, 284, 3785, -814, 28, 595, 17836, 1994, 1583, 12345, 6970, 453, 76, -4090, 680, 4565, -111, 18674, 3457, 21366, -306, -137, 12992, 75, 17303, 1885, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00042137349373660982, 0.00035667407792061567, 0.00028766170726157725, 0.00025854413979686797, 0.00023650008370168507, 0.00030678353505209088, 0.00020805037638638169, 0.00094864697894081473, 0.00043022600584663451, 0.0040582031942903996, 0.00057404261315241456, 0.0014876773348078132, 0.00014733159332536161, 1.6561726434716206e-09, 0.00063243304612115026, 0.00014804101374465972, 1.6561726434716206e-09, 0.0054040788672864437, 0.00033248579711653292, 0.00017119557014666498, 0.00036227313103154302, 0.0030028903856873512, 0.0003434189420659095, 0.0021745581179857254, 0.0009769458556547761, 0.00094103766605257988, 0.0015346163418143988, 0.0017589216586202383, 7.0855130616109818e-05, 0.0013815928250551224, 0.0018433226505294442, 0.00018629184341989458, 0.00011947123130084947, 0.0067207855172455311, 0.0003402417351026088, 0.00031692982884123921, 0.0022436657454818487, 0.00027059111744165421, 0.0025060579646378756, 0.00018931359227281064, 0.00076688686385750771, 0.00010658436076482758, 0.0003744875721167773, 0.0062359888106584549, 0.00037767301546409726, 0.00061373220523819327, 0.00015805799921508878, 0.00028236451908014715, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 50,-127,41,-96,84,-26,-75,51, 
  /* [1][0][][] */ 61,44,-13,-122,6,-20,-69,127, 
  /* [2][0][][] */ 40,2,-37,73,62,127,42,56, 
  /* [3][0][][] */ 56,78,-72,127,-69,2,-5,2, 
  /* [4][0][][] */ -34,-26,55,18,-23,-9,-17,-127, 
  /* [5][0][][] */ -9,0,-49,54,-10,-12,3,127, 
  /* [6][0][][] */ 37,-55,-104,-84,127,53,61,7, 
  /* [7][0][][] */ 127,8,12,-25,-16,10,80,-61, 
  /* [8][0][][] */ -7,-4,2,127,1,22,10,-89, 
  /* [9][0][][] */ 63,-127,1,13,-18,21,-86,86, 
  /* [10][0][][] */ -84,-38,-38,51,2,16,-127,22, 
  /* [11][0][][] */ -25,-30,10,-127,-111,-56,46,-20, 
  /* [12][0][][] */ 46,57,-26,80,-60,16,44,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -4,-41,6,23,55,127,42,31, 
  /* [15][0][][] */ 63,44,25,-127,66,27,-50,89, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 23,31,127,25,-4,-15,9,18, 
  /* [18][0][][] */ 98,-127,-9,110,-49,26,-73,-46, 
  /* [19][0][][] */ -127,-42,-7,30,-75,-51,-103,12, 
  /* [20][0][][] */ 20,31,-69,119,-34,-127,2,35, 
  /* [21][0][][] */ 66,35,127,68,-29,34,80,-33, 
  /* [22][0][][] */ -39,-27,-127,-6,12,6,-80,5, 
  /* [23][0][][] */ -111,106,-23,23,-27,-15,127,-59, 
  /* [24][0][][] */ 25,-34,-56,83,-25,-60,127,126, 
  /* [25][0][][] */ -24,19,9,14,82,127,-30,-33, 
  /* [26][0][][] */ -127,-58,-120,9,-22,40,-109,4, 
  /* [27][0][][] */ -9,-58,-38,-20,-102,127,37,25, 
  /* [28][0][][] */ 13,-24,-72,127,77,125,117,92, 
  /* [29][0][][] */ 46,-1,127,0,-90,9,108,-1, 
  /* [30][0][][] */ -31,127,0,-54,10,-2,43,-41, 
  /* [31][0][][] */ -28,-100,-22,8,35,-56,127,84, 
  /* [32][0][][] */ 42,-6,-45,127,39,108,89,126, 
  /* [33][0][][] */ -17,22,-25,-109,16,-7,-11,127, 
  /* [34][0][][] */ -6,74,-13,-100,11,14,27,127, 
  /* [35][0][][] */ 50,-22,-56,-91,127,34,74,-34, 
  /* [36][0][][] */ -127,-33,41,98,-85,43,-109,51, 
  /* [37][0][][] */ -2,-32,-23,30,15,127,31,52, 
  /* [38][0][][] */ 20,-6,7,76,127,-9,-31,8, 
  /* [39][0][][] */ 3,54,33,-127,22,14,-32,100, 
  /* [40][0][][] */ 71,58,127,22,-52,8,108,86, 
  /* [41][0][][] */ 3,-7,-33,89,74,124,58,127, 
  /* [42][0][][] */ -67,-17,127,21,-32,8,-22,53, 
  /* [43][0][][] */ -10,-55,-1,76,-22,-29,16,-127, 
  /* [44][0][][] */ 67,57,-103,-72,127,-17,14,-89, 
  /* [45][0][][] */ -113,127,-15,-42,20,1,108,-12, 
  /* [46][0][][] */ -89,36,72,74,-41,56,-104,127, 
  /* [47][0][][] */ 65,19,47,11,-9,-26,127,8, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0010016774758696556, 0.00084787583909928799, 0.00068382150493562222, 0.00061460403958335519, 0.0005622014869004488, 0.00072927738074213266, 0.0004945716354995966, 0.0022550974972546101, 0.0010227214079350233, 0.0096470490097999573, 0.0013645982835441828, 0.0035364658106118441, 0.00035023261443711817, 3.937008052901092e-09, 0.0015034024836495519, 0.00035191903589293361, 3.937008052901092e-09, 0.012846427969634533, 0.00079037609975785017, 0.00040696142241358757, 0.00086118571925908327, 0.0071383886970579624, 0.00081636605318635702, 0.0051692998968064785, 0.0023223687894642353, 0.0022370088845491409, 0.0036480478011071682, 0.0041812602430582047, 0.00016843486810103059, 0.0032842846121639013, 0.0043818959966301918, 0.00044284784235060215, 0.00028400373412296176, 0.015976466238498688, 0.00080881331814453006, 0.00075339688919484615, 0.0053335805423557758, 0.00064324180129915476, 0.0059573319740593433, 0.00045003107516095042, 0.001823022379539907, 0.0002533694205339998, 0.00089022156316787004, 0.014824021607637405, 0.00089779391419142485, 0.0014589473139494658, 0.00037573114968836308, 0.00067122920881956816, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -11651, -54081, -9471, -11255, -22036, -1105, -27561, -23293, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0016825823113322258, 0.0011891772737726569, 0.0023940019309520721, 0.0011850582668557763, 0.001187214395031333, 0.0015268876450136304, 0.0010294055100530386, 0.00074070703703910112, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-17,42,-9,127,10,-4,4,4,-110,-64,-10,0,98,12,0, 
  /* [1][0][][] */ 0,-22,-1,108,89,-11,40,11,-4,19,127,-45,0,36,1,0, 
  /* [2][0][][] */ 0,-3,-4,-9,-44,7,5,2,3,17,-5,7,0,127,-10,0, 
  /* [3][0][][] */ 0,-4,0,-127,83,1,55,12,-4,56,17,5,0,7,4,0, 
  /* [4][0][][] */ 0,33,2,27,-81,47,127,-38,5,-89,3,13,0,-20,30,0, 
  /* [5][0][][] */ 0,-15,-6,-1,-30,-26,-5,7,3,8,-8,-39,0,-7,127,0, 
  /* [6][0][][] */ 0,-1,16,13,56,-31,-21,-22,6,-102,109,95,0,127,79,0, 
  /* [7][0][][] */ 0,20,-45,127,13,4,30,1,-5,77,-100,71,0,-10,87,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.071509748697280884, 0.050540033727884293, 0.10174508392810822, 0.05036497488617897, 0.050456609576940536, 0.0648927241563797, 0.04374973475933075, 0.031480047851800919, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { -161, 54393, 219826, 13869, 8892, 32636, 15640, 147445, -11236, 7443, 29878, 12238, -445, 24595, 8685, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 4.8864076234167442e-05, 1.8275577531312592e-05, 0.00025176961207762361, 0.00018868850020226091, 0.00010091107833432034, 0.00033051642822101712, 2.831956408044789e-05, 1.8261953300680034e-05, 0.00024883859441615641, 0.00019138464995194227, 0.00077550305286422372, 0.00072724185883998871, 0.00023567095922771841, 0.00021925785404164344, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,18,-73,-126,39,-67,79,-74,-91,-3,-7,32,-127,6,54,-73, 51,25,-127,127,127,-127,127,-127,-85,127,-127,52,-105,7,127,-25, 24,-24,87,-2,-72,67,-95,82,-95,-28,5,-11,61,2,-99,-29, 
  /* [0][1][][] */ -127,127,-21,13,-43,16,-29,18,-28,0,3,-105,-49,9,-29,-14, -78,-42,-55,-15,-7,-26,8,-26,-108,-89,22,-11,-104,-127,2,23, 14,1,64,2,3,33,-25,37,-127,6,-1,5,-21,12,-2,43, 
  /* [0][2][][] */ -115,-73,66,2,-6,39,-40,56,-77,0,-1,3,40,2,-27,23, 23,-4,29,-2,-27,40,-34,23,-126,-13,2,81,-58,1,-28,-111, 21,-8,14,0,4,14,9,26,-115,4,0,-127,107,3,18,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0020767231471836567, 0.00077671202598139644, 0.010700208134949207, 0.0080192610621452332, 0.0042887208983302116, 0.014046948403120041, 0.0012035814579576254, 0.00077613303437829018, 0.010575640015304089, 0.0081338472664356232, 0.032958880066871643, 0.030907778069376945, 0.010016015730798244, 0.0093184588477015495, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 40171, -56733, -13113, 58435, -233893, 31644, 30230, 532612, 11502, 51591, 2896922, -1073741824, 56146, 13430, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00013897496683057398, 0.00032187817851081491, 2.9389373594312929e-05, 3.3096457627834752e-05, 0.00011475881183287129, 9.1404333943501115e-05, 0.00027197282179258764, 5.7929123613575939e-06, 5.3425417718244717e-05, 6.4099935116246343e-05, 2.0006903014291311e-06, 1.1533876076441629e-09, 6.7401022533886135e-05, 0.00014446281420532614, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 23,-11,20, -10,-27,10, -109,-127,-58, 
  /* [1][1][][] */ -6,-8,3, -18,-1,5, -4,-31,14, 
  /* [1][2][][] */ -18,3,-1, -15,-1,0, 16,-21,13, 
  /* [2][0][][] */ 22,29,-3, 85,127,29, 3,-36,1, 
  /* [2][1][][] */ -1,14,-14, 61,112,-1, -14,-18,-15, 
  /* [2][2][][] */ 4,-70,-9, 16,-51,-25, -9,-64,-17, 
  /* [3][0][][] */ 117,109,65, 53,106,4, -42,-30,-51, 
  /* [3][1][][] */ 97,67,17, 84,127,-17, -35,-42,-21, 
  /* [3][2][][] */ 41,2,1, 42,15,-20, 13,7,10, 
  /* [4][0][][] */ 22,59,-37, 11,75,-28, 10,39,1, 
  /* [4][1][][] */ 5,51,-50, -17,67,-66, 8,37,-44, 
  /* [4][2][][] */ 85,106,-20, 59,127,-59, -5,34,-26, 
  /* [5][0][][] */ 90,97,-70, 68,84,-60, 82,125,44, 
  /* [5][1][][] */ 45,-8,-127, 56,9,-96, 81,103,40, 
  /* [5][2][][] */ 36,55,24, 64,58,40, 65,75,37, 
  /* [6][0][][] */ 30,-62,38, 60,-82,48, 17,-18,17, 
  /* [6][1][][] */ 38,-97,64, 70,-127,75, 6,-34,19, 
  /* [6][2][][] */ 22,-35,19, 22,-42,35, -13,4,5, 
  /* [7][0][][] */ -12,15,31, -127,-92,-8, -36,-12,-3, 
  /* [7][1][][] */ 19,8,33, -119,-120,3, 1,-24,15, 
  /* [7][2][][] */ 4,38,21, -10,-7,13, -20,2,4, 
  /* [8][0][][] */ -122,-119,-123, -122,-120,-123, -122,-121,-124, 
  /* [8][1][][] */ -121,120,-122, -122,-120,-123, -122,-122,-124, 
  /* [8][2][][] */ -121,127,-122, -122,-120,-124, -122,-122,-124, 
  /* [9][0][][] */ 15,56,88, -20,10,38, -27,-14,-10, 
  /* [9][1][][] */ 92,127,-2, 37,93,-4, -18,10,16, 
  /* [9][2][][] */ -49,-50,-11, -16,-51,-18, 23,14,-4, 
  /* [10][0][][] */ -30,-86,-19, 30,93,21, -11,-13,0, 
  /* [10][1][][] */ -62,-104,-13, 77,127,17, -19,-26,2, 
  /* [10][2][][] */ -34,-20,4, 34,23,-9, -11,-2,9, 
  /* [11][0][][] */ -66,-58,-17, -53,-81,-18, -13,-112,-60, 
  /* [11][1][][] */ -84,-69,-35, -73,-88,-52, -29,-68,-58, 
  /* [11][2][][] */ 0,-32,-74, 120,127,62, -30,18,-43, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -54,-100,-17, -63,-113,-24, -10,-18,-3, 
  /* [13][1][][] */ 61,114,17, 57,127,27, 6,15,13, 
  /* [13][2][][] */ -9,-19,5, 0,-19,0, -1,3,-3, 
  /* [14][0][][] */ 50,-13,-38, 84,-31,-50, 39,-12,-19, 
  /* [14][1][][] */ 89,-24,-67, 127,-44,-83, 60,-23,-34, 
  /* [14][2][][] */ 56,-14,-41, 80,-24,-49, 30,-11,-18, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.035438615828752518, 0.082078933715820312, 0.0074942898936569691, 0.0084395958110690117, 0.029263494536280632, 0.023308103904128075, 0.069353066384792328, 0.0014771926216781139, 0.013623480685055256, 0.01634548231959343, 0.00051017600344493985, 2.9411381774480105e-07, 0.017187260091304779, 0.036838013678789139, 3.1706054670621597e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.42066782712936401, } };
const TfArray<1, int> quant46_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.35024413466453552, } };
const TfArray<1, int> quant50_zero = { 1, { 25 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.42402338981628418, } };
const TfArray<1, int> quant53_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.47956755757331848, } };
const TfArray<1, int> quant54_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.24054737389087677, } };
const TfArray<1, int> quant58_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.20914830267429352, } };
const TfArray<1, int> quant61_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.27097848057746887, } };
const TfArray<1, int> quant62_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.30564120411872864, } };
const TfArray<1, int> quant65_zero = { 1, { 26 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.35972097516059875, } };
const TfArray<1, int> quant66_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.077862270176410675, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.24525356292724609, } };
const TfArray<1, int> quant69_zero = { 1, { -47 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 288), (TfLiteIntArray*)&g0::tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_48_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_48_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_48_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_48_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_48_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
